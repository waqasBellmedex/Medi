// <auto-generated />
using System;
using MediFusionPM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediFusionPM.Migrations.ClientDb
{
    [DbContext(typeof(ClientDbContext))]
    [Migration("20200427110332_AddDocumentBatchAppliedInVisit")]
    partial class AddDocumentBatchAppliedInVisit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediFusionPM.Models.Action", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("MediFusionPM.Models.AdjustmentCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Description");

                    b.Property<long?>("GroupID");

                    b.Property<long?>("ReasonID");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("GroupID");

                    b.HasIndex("ReasonID");

                    b.ToTable("AdjustmentCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.AdmissionSourceCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("AdmissionSourceCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.AdmissionTypeCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("AdmissionTypeCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.AdmissionTypeofVisit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("AdmissionTypeofVisit");
                });

            modelBuilder.Entity("MediFusionPM.Models.AppointmentCPT", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<decimal?>("Amount");

                    b.Property<long>("AppointmentID");

                    b.Property<long>("CPTID");

                    b.Property<long?>("CPTMostFavouriteID");

                    b.Property<long?>("ChargeID");

                    b.Property<bool?>("Inactive");

                    b.Property<string>("Modifier1");

                    b.Property<string>("Modifier2");

                    b.Property<string>("NdcUnits");

                    b.Property<string>("Pointer1");

                    b.Property<string>("Pointer2");

                    b.Property<string>("Pointer3");

                    b.Property<string>("Pointer4");

                    b.Property<long?>("PracticeID");

                    b.Property<decimal?>("TotalAmount");

                    b.Property<int?>("Units");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("AppointmentCPT");
                });

            modelBuilder.Entity("MediFusionPM.Models.AppointmentICD", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("AppointmentID");

                    b.Property<long>("ICDID");

                    b.Property<long?>("ICDMostFavouriteID");

                    b.Property<bool?>("Inactive");

                    b.Property<long?>("PracticeID");

                    b.Property<int?>("SerialNo");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("AppointmentICD");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ActionAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.ToTable("ActionAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.AdjustmentCodeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("AdjustmentCodeID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("AdjustmentCodeID");

                    b.ToTable("AdjustmentCodeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.BatchDocumentAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("BatchDocumentID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.ToTable("BatchDocumentAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.BillerAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("BillerID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("BillerID");

                    b.ToTable("BillerAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ChargeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("ChargeID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ChargeID");

                    b.ToTable("ChargeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ChargeSubmissionHistoryAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("ChargeSubmissionHistoryID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ChargeSubmissionHistoryID");

                    b.ToTable("ChargeSubmissionHistoryAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ClientAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("ClientID");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.CptAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<long>("CptID");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("CptID");

                    b.ToTable("CptAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.DesignationsAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("DesignationsID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("DesignationsID");

                    b.ToTable("DesignationsAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.DocumentTypeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("DocumentTypeID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.ToTable("DocumentTypeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi270PayerAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("Edi270PayerID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("Edi270PayerID");

                    b.ToTable("Edi270PayerAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi276PayerAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("Edi276PayerID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("Edi276PayerID");

                    b.ToTable("Edi276PayerAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi837PayerAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("Edi837PayerID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("Edi837PayerID");

                    b.ToTable("Edi837PayerAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.GroupAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("GroupID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ICDAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("ICDID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ICDID");

                    b.ToTable("ICDAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsuranceAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("InsuranceID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("InsuranceID");

                    b.ToTable("InsuranceAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsuranceBillingoptionAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("InsuranceBillingoptionID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("InsuranceBillingoptionID");

                    b.ToTable("InsuranceBillingoptionAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsurancePlanAddressAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("InsurancePlanAddressID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("InsurancePlanAddressID");

                    b.ToTable("InsurancePlanAddressAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsurancePlanAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("InsurancePlanID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("InsurancePlanID");

                    b.ToTable("InsurancePlanAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.LocationAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("LocationID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("LocationAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.MainUserPracticeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("MainUserPracticeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ModifierAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<long>("ModifierID");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ModifierID");

                    b.ToTable("ModifierAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.NotesAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("NotesID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("NotesID");

                    b.ToTable("NotesAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.OnlinePortalCredentialsAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("OnlinePortalCredentialsID");

                    b.Property<long?>("OnlinePortalsID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("OnlinePortalCredentialsID");

                    b.ToTable("OnlinePortalCredentialsAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.OnlinePortalsAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("OnlinePortalsID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("OnlinePortalsID");

                    b.ToTable("OnlinePortalsAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientEligibilityID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientEligibilityID");

                    b.ToTable("PatientEligibilityAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityDetailAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientEligibilityDetailID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientEligibilityDetailID");

                    b.ToTable("PatientEligibilityDetailAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityLogAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientEligibilityLogID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientEligibilityLogID");

                    b.ToTable("PatientEligibilityLogAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientFollowUpAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientFollowUpID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientFollowUpID");

                    b.ToTable("PatientFollowUpAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientFollowUpChargeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientFollowUpChargeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientFollowUpChargeID");

                    b.ToTable("PatientFollowUpChargeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPaymentAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientPaymentID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientPaymentID");

                    b.ToTable("PatientPaymentAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPaymentChargeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientPaymentChargeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientPaymentChargeID");

                    b.ToTable("PatientPaymentChargeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPlanAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PatientPlanID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PatientPlanID");

                    b.ToTable("PatientPlanAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentChargeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PaymentChargeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentChargeID");

                    b.ToTable("PaymentChargeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentCheckAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PaymentCheckID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentCheckID");

                    b.ToTable("PaymentCheckAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentLedgerAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PaymentLedgerID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentLedgerID");

                    b.ToTable("PaymentLedgerAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentVisitAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PaymentVisitID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentVisitID");

                    b.ToTable("PaymentVisitAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanFollowupAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PlanFollowupID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PlanFollowupID");

                    b.ToTable("PlanFollowupAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanFollowupChargeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PlanFollowupChargeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PlanFollowupChargeID");

                    b.ToTable("PlanFollowupChargeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanTypeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PlanTypeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PlanTypeID");

                    b.ToTable("PlanTypeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.POSAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("POSID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("POSID");

                    b.ToTable("POSAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PracticeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("PracticeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("PracticeID");

                    b.ToTable("PracticeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ProviderID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ProviderAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderScheduleAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ProviderScheduleID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ProviderScheduleID");

                    b.ToTable("ProviderScheduleAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderSlotAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ProviderSlotID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ProviderSlotID");

                    b.ToTable("ProviderSlotAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReasonAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ReasonID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ReasonID");

                    b.ToTable("ReasonAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReceiverAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ReceiverID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ReceiverAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RefProviderAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("RefProviderID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("RefProviderID");

                    b.ToTable("RefProviderAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RemarkCodeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("RemarkCodeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("RemarkCodeID");

                    b.ToTable("RemarkCodeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReportsLogAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ReportsLogID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ReportsLogID");

                    b.ToTable("ReportsLogAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ResubmitHistoryAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("ResubmitHistoryID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("ResubmitHistoryID");

                    b.ToTable("ResubmitHistoryAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RightsAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<string>("RightsID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("RightsID");

                    b.ToTable("RightsAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SettingsAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("SettingsID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("SettingsID");

                    b.ToTable("SettingsAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.StatusCodeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("StatusCodeID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("StatusCodeID");

                    b.ToTable("StatusCodeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SubmissionLogAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("SubmissionLogID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("SubmissionLogID");

                    b.ToTable("SubmissionLogAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SubmitterAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("SubmitterID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("SubmitterID");

                    b.ToTable("SubmitterAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TaxonomyAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TaxonomyID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("TaxonomyID");

                    b.ToTable("TaxonomyAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TeamAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TeamID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TypeOfServiceAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<long>("TypeOfServiceID");

                    b.HasKey("ID");

                    b.HasIndex("TypeOfServiceID");

                    b.ToTable("TypeOfServiceAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.UserPracticeAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("UserPracticeAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<long>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("VisitID");

                    b.ToTable("VisitAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitReasonAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<long>("VisitReasonID");

                    b.HasKey("ID");

                    b.HasIndex("VisitReasonID");

                    b.ToTable("VisitReasonAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitStatusAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<long>("VisitStatusID");

                    b.HasKey("ID");

                    b.HasIndex("VisitStatusID");

                    b.ToTable("VisitStatusAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitStatusLogAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.Property<long>("VisitStatusLogID");

                    b.HasKey("ID");

                    b.HasIndex("VisitStatusLogID");

                    b.ToTable("VisitStatusLogAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.AuditException", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("ExceptionMessage");

                    b.Property<string>("TableName");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.ToTable("AuditException");
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocument", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentFilePath");

                    b.Property<long?>("DocumentTypeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FileSize");

                    b.Property<string>("FileType");

                    b.Property<long?>("LocationID");

                    b.Property<long?>("NoOfDemographics");

                    b.Property<long?>("NoOfDemographicsEntered");

                    b.Property<long>("NumberOfPages");

                    b.Property<long?>("PracticeID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("ResponsibleParty");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ProviderID");

                    b.ToTable("BatchDocument");
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocumentCharges", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("BatchDocumentNoID");

                    b.Property<decimal?>("Copay");

                    b.Property<DateTime?>("DOS")
                        .HasColumnType("Date");

                    b.Property<long?>("NoOfVisits");

                    b.Property<decimal?>("OtherPatientAmount");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentNoID");

                    b.ToTable("BatchDocumentCharges");
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocumentPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("Applied");

                    b.Property<long?>("BatchDocumentNoID");

                    b.Property<decimal?>("CheckAmount");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("Date");

                    b.Property<string>("CheckNo");

                    b.Property<string>("Remarks");

                    b.Property<decimal?>("UnApplied");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentNoID");

                    b.ToTable("BatchDocumentPayment");
                });

            modelBuilder.Entity("MediFusionPM.Models.BillClassification", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("BillClassification");
                });

            modelBuilder.Entity("MediFusionPM.Models.Biller", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Biller");
                });

            modelBuilder.Entity("MediFusionPM.Models.CategoryCodes", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("CategoryCodes");
                });

            modelBuilder.Entity("MediFusionPM.Models.Charge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("AppointmentCPTID");

                    b.Property<string>("AuthorizationNum");

                    b.Property<int?>("BaseUnits");

                    b.Property<long>("CPTID");

                    b.Property<long>("ClientID");

                    b.Property<decimal?>("Coinsurance");

                    b.Property<decimal?>("Copay");

                    b.Property<DateTime>("DateOfServiceFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("Date");

                    b.Property<decimal?>("Deductible");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Discount");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool?>("IsDontPrint");

                    b.Property<bool?>("IsReversalApplied");

                    b.Property<bool>("IsSubmitted");

                    b.Property<long>("LocationID");

                    b.Property<string>("Minutes");

                    b.Property<decimal?>("Modifier1Amount");

                    b.Property<long?>("Modifier1ID");

                    b.Property<decimal?>("Modifier2Amount");

                    b.Property<long?>("Modifier2ID");

                    b.Property<decimal?>("Modifier3Amount");

                    b.Property<long?>("Modifier3ID");

                    b.Property<decimal?>("Modifier4Amount");

                    b.Property<long?>("Modifier4ID");

                    b.Property<int?>("ModifierUnits");

                    b.Property<string>("NdcMeasurementUnit");

                    b.Property<string>("NdcNumber");

                    b.Property<int?>("NdcUnits");

                    b.Property<long?>("OrderingProvID");

                    b.Property<decimal?>("OtherPatResp");

                    b.Property<long>("POSID");

                    b.Property<decimal?>("PatientAmount");

                    b.Property<long>("PatientID");

                    b.Property<decimal?>("PatientPaid");

                    b.Property<string>("Pointer1");

                    b.Property<string>("Pointer2");

                    b.Property<string>("Pointer3");

                    b.Property<string>("Pointer4");

                    b.Property<long>("PracticeID");

                    b.Property<decimal?>("PrimaryAllowed");

                    b.Property<decimal?>("PrimaryBal");

                    b.Property<decimal?>("PrimaryBilledAmount");

                    b.Property<decimal?>("PrimaryPaid");

                    b.Property<decimal?>("PrimaryPatientBal");

                    b.Property<long?>("PrimaryPatientPlanID");

                    b.Property<DateTime?>("PrimaryPaymentDate");

                    b.Property<string>("PrimaryStatus");

                    b.Property<decimal?>("PrimaryTransferred");

                    b.Property<decimal?>("PrimaryWriteOff");

                    b.Property<long>("ProviderID");

                    b.Property<long?>("RefProviderID");

                    b.Property<string>("RejectionReason");

                    b.Property<long?>("RevenueCodeID");

                    b.Property<decimal?>("SecondaryAllowed");

                    b.Property<decimal?>("SecondaryBal");

                    b.Property<decimal?>("SecondaryBilledAmount");

                    b.Property<decimal?>("SecondaryPaid");

                    b.Property<decimal?>("SecondaryPatResp");

                    b.Property<decimal?>("SecondaryPatientBal");

                    b.Property<long?>("SecondaryPatientPlanID");

                    b.Property<DateTime?>("SecondaryPaymentDate");

                    b.Property<string>("SecondaryStatus");

                    b.Property<decimal?>("SecondaryTransferred");

                    b.Property<decimal?>("SecondaryWriteOff");

                    b.Property<DateTime?>("StartTime");

                    b.Property<long?>("SubmissionLogID");

                    b.Property<long?>("SubmissionLogID2");

                    b.Property<long?>("SubmissionLogID3");

                    b.Property<DateTime?>("SubmittetdDate")
                        .HasColumnType("Date");

                    b.Property<long?>("SupervisingProvID");

                    b.Property<decimal?>("TertiaryAllowed");

                    b.Property<decimal?>("TertiaryBal");

                    b.Property<decimal?>("TertiaryBilledAmount");

                    b.Property<decimal?>("TertiaryPaid");

                    b.Property<decimal?>("TertiaryPatResp");

                    b.Property<decimal?>("TertiaryPatientBal");

                    b.Property<long?>("TertiaryPatientPlanID");

                    b.Property<string>("TertiaryStatus");

                    b.Property<decimal?>("TertiaryTransferred");

                    b.Property<decimal?>("TertiaryWriteOff");

                    b.Property<int?>("TimeUnits");

                    b.Property<decimal>("TotalAmount");

                    b.Property<string>("UnitOfMeasurement");

                    b.Property<string>("Units");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("CPTID");

                    b.HasIndex("ClientID");

                    b.HasIndex("LocationID");

                    b.HasIndex("Modifier1ID");

                    b.HasIndex("Modifier2ID");

                    b.HasIndex("Modifier3ID");

                    b.HasIndex("Modifier4ID");

                    b.HasIndex("OrderingProvID");

                    b.HasIndex("POSID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("PrimaryPatientPlanID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RefProviderID");

                    b.HasIndex("RevenueCodeID");

                    b.HasIndex("SecondaryPatientPlanID");

                    b.HasIndex("SubmissionLogID");

                    b.HasIndex("SubmissionLogID2");

                    b.HasIndex("SubmissionLogID3");

                    b.HasIndex("SupervisingProvID");

                    b.HasIndex("TertiaryPatientPlanID");

                    b.HasIndex("VisitID");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("MediFusionPM.Models.ChargeStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("Amount");

                    b.Property<decimal?>("BilledAmount");

                    b.Property<string>("CPT");

                    b.Property<string>("CategoryCode1");

                    b.Property<string>("CategoryCode2");

                    b.Property<string>("CategoryCode3");

                    b.Property<long>("ChargeID");

                    b.Property<DateTime?>("CheckDate");

                    b.Property<string>("CheckNumber");

                    b.Property<DateTime?>("DOS");

                    b.Property<string>("EntityCode1");

                    b.Property<string>("EntityCode2");

                    b.Property<string>("EntityCode3");

                    b.Property<string>("Modifier1");

                    b.Property<string>("Modifier2");

                    b.Property<string>("Modifier3");

                    b.Property<string>("Modifier4");

                    b.Property<decimal?>("PaidAmount");

                    b.Property<string>("RejectionReason1");

                    b.Property<string>("RejectionReason2");

                    b.Property<string>("RejectionReason3");

                    b.Property<string>("StatusCode1");

                    b.Property<string>("StatusCode2");

                    b.Property<string>("StatusCode3");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("VisitStatusID");

                    b.HasKey("ID");

                    b.ToTable("ChargeStatus");
                });

            modelBuilder.Entity("MediFusionPM.Models.ChargeSubmissionHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("Amount");

                    b.Property<long?>("ChargeID");

                    b.Property<string>("FormType");

                    b.Property<long?>("PatientPlanID");

                    b.Property<long?>("ReceiverID");

                    b.Property<long?>("SubmissionLogID");

                    b.Property<string>("SubmitType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("PatientPlanID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SubmissionLogID");

                    b.ToTable("ChargeSubmissionHistory");
                });

            modelBuilder.Entity("MediFusionPM.Models.CityStateZipData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Density");

                    b.Property<double>("Lat");

                    b.Property<double>("Lng");

                    b.Property<int>("Population");

                    b.Property<string>("State_id");

                    b.Property<string>("State_name");

                    b.Property<string>("Zip");

                    b.Property<string>("city");

                    b.HasKey("ID");

                    b.ToTable("CityStateZipData");
                });

            modelBuilder.Entity("MediFusionPM.Models.Client", b =>
                {
                    b.Property<long>("ID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("ContactNo");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContextName");

                    b.Property<string>("DeactivateionAdditionalInfo");

                    b.Property<DateTime?>("DeactivationDate");

                    b.Property<string>("DeactivationReason");

                    b.Property<string>("FaxNo");

                    b.Property<bool>("IsClientCreatedSuccessfully");

                    b.Property<bool?>("IsDeactivated");

                    b.Property<DateTime?>("LastNewInsertsModifiedDate");

                    b.Property<DateTime?>("LastNewTrigerModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(60);

                    b.Property<string>("OfficeEmail")
                        .HasMaxLength(60);

                    b.Property<string>("OfficeHour");

                    b.Property<string>("OfficePhoneNo");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(60);

                    b.Property<string>("ServiceLocation");

                    b.Property<string>("State");

                    b.Property<string>("TaxID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("MediFusionPM.Models.ClientDocument", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("ClientID");

                    b.Property<string>("DocumentPath");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("ClientDocument");
                });

            modelBuilder.Entity("MediFusionPM.Models.ClinicalForms", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("Inactive");

                    b.Property<string>("Name");

                    b.Property<long?>("PracticeID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("url");

                    b.HasKey("ID");

                    b.ToTable("ClinicalForms");
                });

            modelBuilder.Entity("MediFusionPM.Models.ClinicalFormsCPT", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("CPTID");

                    b.Property<long>("ClinicalFormID");

                    b.Property<bool?>("Inactive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Modifier");

                    b.Property<long?>("PracticeID");

                    b.Property<decimal>("Price");

                    b.HasKey("ID");

                    b.HasIndex("ClinicalFormID");

                    b.HasIndex("PracticeID");

                    b.ToTable("ClinicalFormsCPT");
                });

            modelBuilder.Entity("MediFusionPM.Models.ConditionCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("ConditionCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.Cpt", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal>("Amount");

                    b.Property<int?>("AnesthesiaBaseUnits");

                    b.Property<string>("CLIANumber");

                    b.Property<string>("CPTCode");

                    b.Property<string>("Category");

                    b.Property<string>("DefaultUnits");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsValid");

                    b.Property<decimal?>("MedicareAmount");

                    b.Property<long?>("Modifier1ID");

                    b.Property<long?>("Modifier2ID");

                    b.Property<long?>("Modifier3ID");

                    b.Property<long?>("Modifier4ID");

                    b.Property<string>("NDCDescription");

                    b.Property<string>("NDCNumber");

                    b.Property<string>("NDCUnitOfMeasurement");

                    b.Property<string>("NDCUnits");

                    b.Property<decimal?>("NonFacilityAmount");

                    b.Property<long?>("POSID");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500);

                    b.Property<long?>("TypeOfServiceID");

                    b.Property<string>("UnitOfMeasurement");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("Modifier1ID");

                    b.HasIndex("Modifier2ID");

                    b.HasIndex("Modifier3ID");

                    b.HasIndex("Modifier4ID");

                    b.HasIndex("POSID");

                    b.HasIndex("TypeOfServiceID");

                    b.ToTable("Cpt");
                });

            modelBuilder.Entity("MediFusionPM.Models.CPTMostFavourite", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("CPTID");

                    b.Property<bool?>("Inactive");

                    b.Property<long?>("PracticeID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitReasonID");

                    b.HasKey("ID");

                    b.ToTable("CPTMostFavourite");
                });

            modelBuilder.Entity("MediFusionPM.Models.Designations", b =>
                {
                    b.Property<long>("ID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("MediFusionPM.Models.DocumentType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("MediFusionPM.Models.DownloadedFile", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("FilePath");

                    b.Property<string>("FileType");

                    b.Property<bool?>("Processed");

                    b.Property<long?>("ReportsLogID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("DownloadedFile");
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi270Payer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<long>("ReceiverID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Edi270Payer");
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi276Payer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<long>("ReceiverID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Edi276Payer");
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi837Payer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ERA");

                    b.Property<string>("Enrollment");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<long>("ReceiverID");

                    b.Property<string>("Secondary");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("notes");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Edi837Payer");
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalCharge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal>("Adj");

                    b.Property<decimal>("Balance");

                    b.Property<long?>("CPTID");

                    b.Property<long?>("ChargeID");

                    b.Property<decimal>("Charges");

                    b.Property<string>("CptCode");

                    b.Property<string>("DOB");

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("Date");

                    b.Property<string>("DaysOrUnits");

                    b.Property<string>("DiagnosisCode");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ExternalPatientID");

                    b.Property<string>("FileName");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<long>("GroupID");

                    b.Property<long?>("Insurance");

                    b.Property<string>("InsuranceName");

                    b.Property<decimal>("InsurancePayment");

                    b.Property<string>("LastName");

                    b.Property<long>("LocationID");

                    b.Property<string>("MergeStatus");

                    b.Property<string>("Modifier1Code");

                    b.Property<long?>("Modifier1ID");

                    b.Property<string>("Modifier2Code");

                    b.Property<long?>("Modifier2ID");

                    b.Property<string>("Modifier3Code");

                    b.Property<long?>("Modifier3ID");

                    b.Property<string>("Modifier4Code");

                    b.Property<long?>("Modifier4ID");

                    b.Property<string>("NeedDemos");

                    b.Property<string>("NotBilled");

                    b.Property<string>("OfficeName");

                    b.Property<string>("POSCode");

                    b.Property<long?>("POSID");

                    b.Property<long?>("PatientID");

                    b.Property<decimal>("PatientPayment");

                    b.Property<long?>("PaymentCheckID");

                    b.Property<string>("PaymentProcessed");

                    b.Property<long>("PracticeID");

                    b.Property<string>("PrescribingMD");

                    b.Property<long?>("PrimaryInsuredID");

                    b.Property<long>("ProviderID");

                    b.Property<string>("ProviderName");

                    b.Property<string>("Remarks");

                    b.Property<string>("ReportType");

                    b.Property<long?>("SecondaryInsuredID");

                    b.Property<string>("SheetName");

                    b.Property<DateTime>("SubmittetdDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("CPTID");

                    b.HasIndex("LocationID");

                    b.HasIndex("Modifier1ID");

                    b.HasIndex("Modifier2ID");

                    b.HasIndex("Modifier3ID");

                    b.HasIndex("Modifier4ID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ExternalCharge");
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalInjuryCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("ExternalInjuryCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalPatient", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNum");

                    b.Property<string>("AccountType");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<long?>("BatchDocumentID");

                    b.Property<string>("City");

                    b.Property<string>("Created");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("Date");

                    b.Property<string>("Email");

                    b.Property<string>("EmergencyAddress");

                    b.Property<string>("EmergencyCity");

                    b.Property<string>("EmergencyContact");

                    b.Property<string>("EmergencyPhone");

                    b.Property<string>("EmergencyState");

                    b.Property<string>("EmergencyZip");

                    b.Property<string>("EmployerAddress");

                    b.Property<string>("EmployerCity");

                    b.Property<string>("EmployerName");

                    b.Property<string>("EmployerPhone");

                    b.Property<string>("EmployerState");

                    b.Property<string>("EmployerZip");

                    b.Property<string>("Ethnicity");

                    b.Property<string>("ExternalPatientID");

                    b.Property<string>("FileName");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("GuarantarID");

                    b.Property<string>("GuarantarName");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<long?>("LocationId");

                    b.Property<string>("LocationNPI");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MedicalRecordNumber");

                    b.Property<string>("MergeStatus");

                    b.Property<string>("MiddleInitial");

                    b.Property<string>("MissingInfo");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool?>("NeedInsuranceCard");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("PageNumber");

                    b.Property<string>("PhoneNumber");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("PracticeNPI");

                    b.Property<string>("PreferredLanguage");

                    b.Property<string>("PrescribingMD");

                    b.Property<string>("PrimaryDescription");

                    b.Property<string>("PrimaryGroup");

                    b.Property<string>("PrimaryInsurance");

                    b.Property<string>("PrimaryInsuredID");

                    b.Property<string>("PrimaryInsuredName");

                    b.Property<long?>("PrimaryPatientPlanID");

                    b.Property<string>("PrimaryProvider");

                    b.Property<string>("ProfilePic");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("ProviderNPI");

                    b.Property<string>("Race");

                    b.Property<long?>("RefProviderID");

                    b.Property<decimal?>("RemainingDeductible");

                    b.Property<string>("SSN")
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryDescription");

                    b.Property<string>("SecondaryGroup");

                    b.Property<string>("SecondaryInsurance");

                    b.Property<string>("SecondaryInsuredID");

                    b.Property<string>("SecondaryInsuredName");

                    b.Property<long?>("SecondaryPatientPlanID");

                    b.Property<string>("State");

                    b.Property<bool?>("Statement");

                    b.Property<string>("StatementMessage");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode");

                    b.Property<string>("ZipCodeExtension");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("LocationId");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RefProviderID");

                    b.ToTable("ExternalPatient");
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal>("Adj");

                    b.Property<decimal>("Balance");

                    b.Property<long?>("CPTID");

                    b.Property<decimal>("Charges");

                    b.Property<DateTime?>("CheckDate");

                    b.Property<string>("CheckNumber");

                    b.Property<string>("CptCode");

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("Date");

                    b.Property<string>("DaysOrUnits");

                    b.Property<string>("ExternalChargeID");

                    b.Property<string>("ExternalPatientID");

                    b.Property<string>("InsuranceName");

                    b.Property<decimal>("InsurancePayment");

                    b.Property<long>("LocationID");

                    b.Property<string>("MergeStatus");

                    b.Property<string>("POSCode");

                    b.Property<long?>("POSID");

                    b.Property<string>("PatientName");

                    b.Property<decimal>("PatientPayment");

                    b.Property<long>("PracticeID");

                    b.Property<long>("ProviderID");

                    b.Property<string>("ProviderName");

                    b.Property<DateTime>("SubmittetdDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CPTID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ExternalPayment");
                });

            modelBuilder.Entity("MediFusionPM.Models.GeneralItems", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<long>("Value");

                    b.Property<int?>("position");

                    b.HasKey("ID");

                    b.ToTable("GeneralItems");
                });

            modelBuilder.Entity("MediFusionPM.Models.Group", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MediFusionPM.Models.ICD", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ICDCode");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsValid");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("ICD");
                });

            modelBuilder.Entity("MediFusionPM.Models.ICDMostFavourite", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("ICDID");

                    b.Property<bool?>("Inactive");

                    b.Property<long?>("PracticeID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitReasonID");

                    b.HasKey("ID");

                    b.ToTable("ICDMostFavourite");
                });

            modelBuilder.Entity("MediFusionPM.Models.InstitutionalData", b =>
                {
                    b.Property<long>("ID");

                    b.Property<DateTime?>("AdmissionDate");

                    b.Property<DateTime?>("AdmissionHour");

                    b.Property<long?>("AdmissionSourceCodeID");

                    b.Property<long?>("AdmissionSourceID");

                    b.Property<string>("AdmissionType");

                    b.Property<long?>("AdmittingCodeID");

                    b.Property<long?>("ConditionCode10ID");

                    b.Property<long?>("ConditionCode11ID");

                    b.Property<long?>("ConditionCode12ID");

                    b.Property<long?>("ConditionCode1ID");

                    b.Property<long?>("ConditionCode2ID");

                    b.Property<long?>("ConditionCode3ID");

                    b.Property<long?>("ConditionCode4ID");

                    b.Property<long?>("ConditionCode5ID");

                    b.Property<long?>("ConditionCode6ID");

                    b.Property<long?>("ConditionCode7ID");

                    b.Property<long?>("ConditionCode8ID");

                    b.Property<long?>("ConditionCode9ID");

                    b.Property<long?>("ConditionCodeID1");

                    b.Property<long?>("ConditionCodeID10");

                    b.Property<long?>("ConditionCodeID11");

                    b.Property<long?>("ConditionCodeID12");

                    b.Property<long?>("ConditionCodeID2");

                    b.Property<long?>("ConditionCodeID3");

                    b.Property<long?>("ConditionCodeID4");

                    b.Property<long?>("ConditionCodeID5");

                    b.Property<long?>("ConditionCodeID6");

                    b.Property<long?>("ConditionCodeID7");

                    b.Property<long?>("ConditionCodeID8");

                    b.Property<long?>("ConditionCodeID9");

                    b.Property<long?>("Cpt1ID");

                    b.Property<long?>("Cpt2ID");

                    b.Property<long?>("Cpt3ID");

                    b.Property<long?>("Cpt4ID");

                    b.Property<long?>("Cpt5ID");

                    b.Property<long?>("CptID");

                    b.Property<DateTime?>("DischargeDate");

                    b.Property<long?>("ExternalInjury1ID");

                    b.Property<long?>("ExternalInjury2ID");

                    b.Property<long?>("ExternalInjury3ID");

                    b.Property<long?>("ExternalInjuryCode1");

                    b.Property<long?>("ExternalInjuryCode2");

                    b.Property<long?>("ExternalInjuryCode3");

                    b.Property<long?>("ICD1ID");

                    b.Property<long?>("ICDID");

                    b.Property<DateTime?>("OccuranceCode1Date");

                    b.Property<DateTime?>("OccuranceCode2Date");

                    b.Property<DateTime?>("OccuranceCode3Date");

                    b.Property<DateTime?>("OccuranceCode4Date");

                    b.Property<DateTime?>("OccuranceCode5Date");

                    b.Property<DateTime?>("OccuranceCode6Date");

                    b.Property<DateTime?>("OccuranceCode7Date");

                    b.Property<DateTime?>("OccuranceCode8Date");

                    b.Property<long?>("OccuranceCodeID1");

                    b.Property<long?>("OccuranceCodeID2");

                    b.Property<long?>("OccuranceCodeID3");

                    b.Property<long?>("OccuranceCodeID4");

                    b.Property<long?>("OccuranceCodeID5");

                    b.Property<long?>("OccuranceCodeID6");

                    b.Property<long?>("OccuranceCodeID7");

                    b.Property<long?>("OccuranceCodeID8");

                    b.Property<long?>("OccuranceSpanCodeID1");

                    b.Property<long?>("OccuranceSpanCodeID2");

                    b.Property<long?>("OccuranceSpanCodeID3");

                    b.Property<long?>("OccuranceSpanCodeID4");

                    b.Property<long?>("OccurrenceCode1ID");

                    b.Property<long?>("OccurrenceCode2ID");

                    b.Property<long?>("OccurrenceCode3ID");

                    b.Property<long?>("OccurrenceCode4ID");

                    b.Property<long?>("OccurrenceCode5ID");

                    b.Property<long?>("OccurrenceCode6ID");

                    b.Property<long?>("OccurrenceCode7ID");

                    b.Property<long?>("OccurrenceCode8ID");

                    b.Property<long?>("OccurrenceSpanCode1ID");

                    b.Property<long?>("OccurrenceSpanCode2ID");

                    b.Property<long?>("OccurrenceSpanCode3ID");

                    b.Property<long?>("OccurrenceSpanCode4ID");

                    b.Property<long?>("PatientStatusCodeID");

                    b.Property<long?>("PrincipalCodeID");

                    b.Property<long?>("PrincipalProcedureCodeID1");

                    b.Property<long?>("PrincipalProcedureCodeID2");

                    b.Property<long?>("PrincipalProcedureCodeID3");

                    b.Property<long?>("PrincipalProcedureCodeID4");

                    b.Property<long?>("PrincipalProcedureCodeID5");

                    b.Property<long?>("PrincipalProcedureCodeID6");

                    b.Property<DateTime?>("PrincipalProcedureDate1");

                    b.Property<DateTime?>("PrincipalProcedureDate2");

                    b.Property<DateTime?>("PrincipalProcedureDate3");

                    b.Property<DateTime?>("PrincipalProcedureDate4");

                    b.Property<DateTime?>("PrincipalProcedureDate5");

                    b.Property<DateTime?>("PrincipalProcedureDate6");

                    b.Property<long?>("ReasonOfVisitID");

                    b.Property<DateTime?>("SpanCode1FromDate");

                    b.Property<DateTime?>("SpanCode1ToDate");

                    b.Property<DateTime?>("SpanCode2FromDate");

                    b.Property<DateTime?>("SpanCode2ToDate");

                    b.Property<DateTime?>("SpanCode3FromDate");

                    b.Property<DateTime?>("SpanCode3ToDate");

                    b.Property<DateTime?>("SpanCode4FromDate");

                    b.Property<DateTime?>("SpanCode4ToDate");

                    b.Property<DateTime?>("StatementFromDate");

                    b.Property<DateTime?>("StatementToDate");

                    b.Property<long?>("ValueCode10ID");

                    b.Property<long?>("ValueCode11ID");

                    b.Property<long?>("ValueCode12ID");

                    b.Property<long?>("ValueCode1ID");

                    b.Property<long?>("ValueCode2ID");

                    b.Property<long?>("ValueCode3ID");

                    b.Property<long?>("ValueCode4ID");

                    b.Property<long?>("ValueCode5ID");

                    b.Property<long?>("ValueCode6ID");

                    b.Property<long?>("ValueCode7ID");

                    b.Property<long?>("ValueCode8ID");

                    b.Property<long?>("ValueCode9ID");

                    b.Property<long?>("ValueCodeID1");

                    b.Property<long?>("ValueCodeID10");

                    b.Property<long?>("ValueCodeID11");

                    b.Property<long?>("ValueCodeID12");

                    b.Property<long?>("ValueCodeID2");

                    b.Property<long?>("ValueCodeID3");

                    b.Property<long?>("ValueCodeID4");

                    b.Property<long?>("ValueCodeID5");

                    b.Property<long?>("ValueCodeID6");

                    b.Property<long?>("ValueCodeID7");

                    b.Property<long?>("ValueCodeID8");

                    b.Property<long?>("ValueCodeID9");

                    b.Property<long?>("VisitReasonID");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionSourceCodeID");

                    b.HasIndex("ConditionCode10ID");

                    b.HasIndex("ConditionCode11ID");

                    b.HasIndex("ConditionCode12ID");

                    b.HasIndex("ConditionCode1ID");

                    b.HasIndex("ConditionCode2ID");

                    b.HasIndex("ConditionCode3ID");

                    b.HasIndex("ConditionCode4ID");

                    b.HasIndex("ConditionCode5ID");

                    b.HasIndex("ConditionCode6ID");

                    b.HasIndex("ConditionCode7ID");

                    b.HasIndex("ConditionCode8ID");

                    b.HasIndex("ConditionCode9ID");

                    b.HasIndex("Cpt1ID");

                    b.HasIndex("Cpt2ID");

                    b.HasIndex("Cpt3ID");

                    b.HasIndex("Cpt4ID");

                    b.HasIndex("Cpt5ID");

                    b.HasIndex("CptID");

                    b.HasIndex("ExternalInjury1ID");

                    b.HasIndex("ExternalInjury2ID");

                    b.HasIndex("ExternalInjury3ID");

                    b.HasIndex("ICD1ID");

                    b.HasIndex("ICDID");

                    b.HasIndex("OccurrenceCode1ID");

                    b.HasIndex("OccurrenceCode2ID");

                    b.HasIndex("OccurrenceCode3ID");

                    b.HasIndex("OccurrenceCode4ID");

                    b.HasIndex("OccurrenceCode5ID");

                    b.HasIndex("OccurrenceCode6ID");

                    b.HasIndex("OccurrenceCode7ID");

                    b.HasIndex("OccurrenceCode8ID");

                    b.HasIndex("OccurrenceSpanCode1ID");

                    b.HasIndex("OccurrenceSpanCode2ID");

                    b.HasIndex("OccurrenceSpanCode3ID");

                    b.HasIndex("OccurrenceSpanCode4ID");

                    b.HasIndex("PatientStatusCodeID");

                    b.HasIndex("ValueCode10ID");

                    b.HasIndex("ValueCode11ID");

                    b.HasIndex("ValueCode12ID");

                    b.HasIndex("ValueCode1ID");

                    b.HasIndex("ValueCode2ID");

                    b.HasIndex("ValueCode3ID");

                    b.HasIndex("ValueCode4ID");

                    b.HasIndex("ValueCode5ID");

                    b.HasIndex("ValueCode6ID");

                    b.HasIndex("ValueCode7ID");

                    b.HasIndex("ValueCode8ID");

                    b.HasIndex("ValueCode9ID");

                    b.HasIndex("VisitReasonID");

                    b.ToTable("InstitutionalData");
                });

            modelBuilder.Entity("MediFusionPM.Models.Insurance", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("OfficePhoneNum")
                        .HasMaxLength(10);

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("MediFusionPM.Models.InsuranceBillingoption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("InsurancePlanID");

                    b.Property<long>("LocationID");

                    b.Property<string>("PayToAddress");

                    b.Property<long>("ProviderID");

                    b.Property<bool?>("ReportTaxID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("InsurancePlanID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ProviderID");

                    b.ToTable("InsuranceBillingoption");
                });

            modelBuilder.Entity("MediFusionPM.Models.InsurancePlan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<long?>("Edi270PayerID");

                    b.Property<long?>("Edi276PayerID");

                    b.Property<long?>("Edi837PayerID");

                    b.Property<string>("FormType");

                    b.Property<long?>("InsuranceID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCapitated");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes");

                    b.Property<int?>("OutstandingDays");

                    b.Property<string>("PayerID");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("PlanTypeID");

                    b.Property<string>("SubmissionType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("Edi270PayerID");

                    b.HasIndex("Edi276PayerID");

                    b.HasIndex("Edi837PayerID");

                    b.HasIndex("InsuranceID");

                    b.HasIndex("PlanTypeID");

                    b.ToTable("InsurancePlan");
                });

            modelBuilder.Entity("MediFusionPM.Models.InsurancePlanAddress", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<long>("InsurancePlanId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("ZipCodeExtension");

                    b.HasKey("ID");

                    b.HasIndex("InsurancePlanId");

                    b.ToTable("InsurancePlanAddress");
                });

            modelBuilder.Entity("MediFusionPM.Models.Location", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("CLIANumber")
                        .HasMaxLength(10);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Email");

                    b.Property<string>("Fax")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NPI")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("POSID");

                    b.Property<string>("PhoneNumExt")
                        .HasMaxLength(4);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<long?>("PracticeID");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("website");

                    b.HasKey("ID");

                    b.HasIndex("POSID");

                    b.HasIndex("PracticeID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("MediFusionPM.Models.Modifier", b =>
                {
                    b.Property<long?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<int?>("AnesthesiaBaseUnits");

                    b.Property<string>("Code");

                    b.Property<decimal?>("DefaultFees");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Modifier");
                });

            modelBuilder.Entity("MediFusionPM.Models.Notes", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("BatchDocumentNoID");

                    b.Property<string>("Note");

                    b.Property<DateTime?>("NotesDate");

                    b.Property<long?>("PatientFollowUpID");

                    b.Property<long?>("PatientID");

                    b.Property<long?>("PlanFollowupID");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentNoID");

                    b.HasIndex("PatientFollowUpID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PlanFollowupID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("VisitID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MediFusionPM.Models.OccurrenceCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("OccurrenceCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.OccurrenceSpanCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("OccurrenceSpanCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.OnlinePortalCredentials", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Notes");

                    b.Property<long?>("OnlinePortalsID");

                    b.Property<string>("Password");

                    b.Property<DateTime?>("PasswordExpiryDate");

                    b.Property<string>("SecurityA1");

                    b.Property<string>("SecurityA2");

                    b.Property<string>("SecurityA3");

                    b.Property<string>("SecurityQ2");

                    b.Property<string>("SecurityQ3");

                    b.Property<string>("SercurityQ1");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.HasIndex("OnlinePortalsID");

                    b.ToTable("OnlinePortalCredentials");
                });

            modelBuilder.Entity("MediFusionPM.Models.OnlinePortals", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("InsurancePlanID");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<string>("URL");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("OnlinePortals");
                });

            modelBuilder.Entity("MediFusionPM.Models.Patient", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNum");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<long?>("BatchDocumentID");

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("Date");

                    b.Property<bool?>("DocumentBatchApplied");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("Ethnicity");

                    b.Property<string>("ExternalPatientID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35);

                    b.Property<string>("Gender");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(35);

                    b.Property<long?>("LocationId");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MedicalRecordNumber");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(3);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(10);

                    b.Property<string>("NewAccountNum")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("PageNumber");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<long?>("PracticeID");

                    b.Property<string>("PrescribingMD");

                    b.Property<string>("ProfilePic");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("Race");

                    b.Property<long?>("RefProviderID");

                    b.Property<decimal?>("RemainingDeductible");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<bool?>("Statement");

                    b.Property<string>("StatementMessage");

                    b.Property<string>("Title");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("ZipCodeExtension");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("LocationId");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RefProviderID");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAlerts", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("assignedTo");

                    b.Property<DateTime?>("date");

                    b.Property<bool?>("inactive");

                    b.Property<string>("notes");

                    b.Property<long>("patientID");

                    b.Property<long?>("practiceId");

                    b.Property<string>("resolveComments");

                    b.Property<bool?>("resolved");

                    b.Property<string>("resolvedBy");

                    b.Property<DateTime?>("resolvedDate");

                    b.Property<string>("type");

                    b.HasKey("ID");

                    b.ToTable("PatientAlerts");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAppointment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<bool?>("Inactive");

                    b.Property<long?>("LocationID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<long>("PatientID");

                    b.Property<long?>("PrimarypatientPlanID");

                    b.Property<long?>("ProviderID");

                    b.Property<long?>("RoomID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Time");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VisitInterval");

                    b.Property<long?>("VisitReasonID");

                    b.Property<string>("color");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrimarypatientPlanID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("VisitReasonID");

                    b.ToTable("PatientAppointment");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAuthorization", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<DateTime?>("AuthorizationDate");

                    b.Property<string>("AuthorizationNumber");

                    b.Property<decimal?>("AuthorizedAmount");

                    b.Property<long?>("CPTID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("ICDID");

                    b.Property<long?>("InsurancePlanID");

                    b.Property<bool?>("MedicalNecessityRequired");

                    b.Property<bool?>("MedicalRecordRequired");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PatientID");

                    b.Property<long?>("PatientPlanID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("Remaining");

                    b.Property<string>("Remarks");

                    b.Property<int?>("RemindBeforeDays");

                    b.Property<int?>("RemindBeforeRemainingVisits");

                    b.Property<string>("ResponsibleParty");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitsAllowed");

                    b.Property<long?>("VisitsUsed");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientAuthorization");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAuthorizationUsed", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("PatientAuthID");

                    b.Property<long?>("PatientAuthorizationID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("PatientAuthorizationID");

                    b.HasIndex("VisitID");

                    b.ToTable("PatientAuthorizationUsed");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientEligibility", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<DateTime?>("DOS");

                    b.Property<DateTime?>("EligibilityDate");

                    b.Property<string>("ErrorMessage");

                    b.Property<long?>("LocationID");

                    b.Property<string>("PatientAddress");

                    b.Property<string>("PatientCity");

                    b.Property<DateTime?>("PatientDOB");

                    b.Property<string>("PatientFN");

                    b.Property<string>("PatientGender");

                    b.Property<long>("PatientID");

                    b.Property<string>("PatientLN");

                    b.Property<string>("PatientMI");

                    b.Property<long>("PatientPlanID");

                    b.Property<string>("PatientState");

                    b.Property<string>("PatientZip");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<long>("PracticeID");

                    b.Property<string>("ProviderFN");

                    b.Property<long>("ProviderID");

                    b.Property<string>("ProviderLN");

                    b.Property<string>("ProviderNPI");

                    b.Property<string>("Rejection");

                    b.Property<string>("RejectionCode");

                    b.Property<string>("Relation");

                    b.Property<string>("Status");

                    b.Property<string>("SubscriberAddress");

                    b.Property<string>("SubscriberCity");

                    b.Property<DateTime?>("SubscriberDOB");

                    b.Property<string>("SubscriberFN");

                    b.Property<string>("SubscriberGender");

                    b.Property<string>("SubscriberGroupNumber");

                    b.Property<string>("SubscriberID");

                    b.Property<string>("SubscriberLN");

                    b.Property<string>("SubscriberMI");

                    b.Property<string>("SubscriberState");

                    b.Property<string>("SubscriberZip");

                    b.Property<string>("TRNNumber");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientEligibility");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientEligibilityDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Authorization");

                    b.Property<decimal?>("BenefitAmount");

                    b.Property<string>("BenefitPercentage");

                    b.Property<string>("Coverage");

                    b.Property<string>("CoverageLevel");

                    b.Property<string>("DateId1");

                    b.Property<string>("DateId2");

                    b.Property<string>("DateId3");

                    b.Property<string>("DateId4");

                    b.Property<string>("DateId5");

                    b.Property<string>("DateValue1");

                    b.Property<string>("DateValue2");

                    b.Property<string>("DateValue3");

                    b.Property<string>("DateValue4");

                    b.Property<string>("DateValue5");

                    b.Property<string>("Messages");

                    b.Property<long>("PatientEligibilityID");

                    b.Property<string>("PlanDescription");

                    b.Property<string>("PlanName");

                    b.Property<string>("PlanNetwork");

                    b.Property<string>("ReferenceId1");

                    b.Property<string>("ReferenceId2");

                    b.Property<string>("ReferenceId3");

                    b.Property<string>("ReferenceId4");

                    b.Property<string>("ReferenceId5");

                    b.Property<string>("ReferenceValue1");

                    b.Property<string>("ReferenceValue2");

                    b.Property<string>("ReferenceValue3");

                    b.Property<string>("ReferenceValue4");

                    b.Property<string>("ReferenceValue5");

                    b.Property<string>("ServiceTypes");

                    b.Property<string>("TimePeriod");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientEligibilityDetail");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientEligibilityLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("PatientEligibilityID");

                    b.Property<string>("Transaction270Path");

                    b.Property<string>("Transaction271Path");

                    b.Property<string>("Transaction999Path");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientEligibilityLog");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientFollowUpCharge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("AdjustmentCodeID");

                    b.Property<long?>("ChargeID");

                    b.Property<long?>("GroupID");

                    b.Property<long?>("PatientFollowUpID");

                    b.Property<long?>("PaymentChargeID");

                    b.Property<long?>("ReasonID");

                    b.Property<DateTime?>("Statement1SentDate");

                    b.Property<DateTime?>("Statement2SentDate");

                    b.Property<DateTime?>("Statement3SentDate");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PatientFollowUpID");

                    b.HasIndex("ReasonID");

                    b.ToTable("PatientFollowUpCharge");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientForms", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("ClinicalFormID");

                    b.Property<bool?>("Inactive");

                    b.Property<long?>("PatientAppointmentID");

                    b.Property<long?>("PatientID");

                    b.Property<long>("PracticeID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientForms");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientMedicalNotes", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("Inactive");

                    b.Property<long>("PatientNotesId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("note");

                    b.Property<string>("note_html");

                    b.HasKey("ID");

                    b.ToTable("PatientMedicalNotes");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientNotes", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("AppointmentID");

                    b.Property<string>("CoSignedBy");

                    b.Property<DateTime?>("CoSignedDate");

                    b.Property<DateTime>("DOS");

                    b.Property<long?>("DocumentID");

                    b.Property<int?>("DocumentSize");

                    b.Property<bool?>("Inactive");

                    b.Property<long>("LocationID");

                    b.Property<long>("PatientID");

                    b.Property<long>("PracticeID");

                    b.Property<long>("ProviderID");

                    b.Property<bool?>("Signed");

                    b.Property<string>("SignedBy");

                    b.Property<DateTime?>("SignedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<decimal?>("AllocatedAmount");

                    b.Property<string>("CCTransactionID");

                    b.Property<string>("CheckNumber");

                    b.Property<string>("Description");

                    b.Property<bool?>("InActive");

                    b.Property<long?>("PatientID");

                    b.Property<decimal?>("PaymentAmount");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<string>("PaymentMethod");

                    b.Property<decimal?>("RemainingAmount");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.Property<long?>("patientAppointmentID");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.HasIndex("VisitID");

                    b.HasIndex("patientAppointmentID");

                    b.ToTable("PatientPayment");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPaymentCharge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("AllocatedAmount");

                    b.Property<long?>("ChargeID");

                    b.Property<long>("PatientPaymentID");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("PatientPaymentID");

                    b.HasIndex("VisitID");

                    b.ToTable("PatientPaymentCharge");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPlan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<bool?>("AuthRequired");

                    b.Property<long?>("BatchDocumentID");

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<decimal?>("CoInsurance");

                    b.Property<decimal?>("Copay");

                    b.Property<string>("Coverage");

                    b.Property<DateTime?>("DOB");

                    b.Property<decimal?>("Deductible");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<long?>("EmlpoyerID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("FrontSideCard");

                    b.Property<string>("Gender");

                    b.Property<string>("GroupName");

                    b.Property<long?>("InsurancePlanAddressID");

                    b.Property<long?>("InsurancePlanID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsSelfPay");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(3);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("PageNumber");

                    b.Property<long>("PatientID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PlanBeginDate");

                    b.Property<DateTime?>("PlanEndDate");

                    b.Property<string>("RelationShip");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("SubscriberId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("ZipCodeExtension");

                    b.Property<string>("backSidecard");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("InsurancePlanAddressID");

                    b.HasIndex("InsurancePlanID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientPlan");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientReferral", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FaxStatus");

                    b.Property<long?>("InsurancePlanID");

                    b.Property<long?>("PCPID");

                    b.Property<long?>("PatientID");

                    b.Property<long?>("PatientPlanID");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("ReferralNo");

                    b.Property<string>("RererralForService");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VisitAllowed");

                    b.Property<int?>("VisitUsed");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientReferral");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientStatement", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Message");

                    b.Property<long>("PatientID");

                    b.Property<long>("PracticeID");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("VisitID");

                    b.Property<string>("csv_url");

                    b.Property<string>("pdf_url");

                    b.Property<int>("statementStatus");

                    b.HasKey("ID");

                    b.ToTable("PatientStatement");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientStatementChargeHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long>("ChargeID");

                    b.Property<long>("PatientStatementID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientStatementChargeHistory");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientStatusCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PatientStatusCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientVitals", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<decimal?>("BMI");

                    b.Property<decimal?>("BPDiastolic");

                    b.Property<decimal?>("BPSystolic");

                    b.Property<decimal?>("HeadCircumference");

                    b.Property<decimal?>("Height_foot");

                    b.Property<decimal?>("Height_inch");

                    b.Property<bool?>("Inactive");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<int?>("Pain");

                    b.Property<long>("PatientNotesId");

                    b.Property<decimal>("PracticeID");

                    b.Property<decimal?>("Pulse");

                    b.Property<decimal?>("Respiratory_rate");

                    b.Property<decimal?>("Temperature");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal?>("Weight_lbs");

                    b.Property<decimal?>("Weight_pounds");

                    b.HasKey("ID");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("MediFusionPM.Models.PaymentCheck", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("AppliedAmount");

                    b.Property<long?>("BatchDocumentID");

                    b.Property<decimal?>("CheckAmount");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("Date");

                    b.Property<string>("CheckNumber");

                    b.Property<string>("Comments");

                    b.Property<string>("CreditDebitFlag");

                    b.Property<long?>("DownloadedFileID");

                    b.Property<long>("NumberOfPatients");

                    b.Property<long>("NumberOfVisits");

                    b.Property<string>("PageNumber");

                    b.Property<string>("PayeeAddress");

                    b.Property<string>("PayeeCity");

                    b.Property<string>("PayeeNPI");

                    b.Property<string>("PayeeName");

                    b.Property<string>("PayeeState");

                    b.Property<string>("PayeeTaxID");

                    b.Property<string>("PayeeZipCode");

                    b.Property<string>("PayerAddress")
                        .HasMaxLength(55);

                    b.Property<string>("PayerCity")
                        .HasMaxLength(20);

                    b.Property<string>("PayerContactNumber");

                    b.Property<string>("PayerContactPerson");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<string>("PayerState")
                        .HasMaxLength(2);

                    b.Property<string>("PayerZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("PaymentMethod");

                    b.Property<decimal?>("PostedAmount");

                    b.Property<string>("PostedBy");

                    b.Property<DateTime?>("PostedDate");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("REF_2U_ID");

                    b.Property<long?>("ReceiverID");

                    b.Property<string>("Status");

                    b.Property<string>("TransactionCode");

                    b.Property<decimal?>("UnAppliedAmount");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("PaymentCheck");
                });

            modelBuilder.Entity("MediFusionPM.Models.PaymentLedger", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("AdjustmentCodeID");

                    b.Property<decimal?>("Amount");

                    b.Property<long>("ChargeID");

                    b.Property<string>("LedgerBy");

                    b.Property<DateTime?>("LedgerDate")
                        .HasColumnType("Date");

                    b.Property<string>("LedgerDescription");

                    b.Property<string>("LedgerType");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<long?>("PatientPaymentChargeID");

                    b.Property<long?>("PatientPlanID");

                    b.Property<long?>("PaymentChargeID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("AdjustmentCodeID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("PatientPaymentChargeID");

                    b.HasIndex("PatientPlanID");

                    b.HasIndex("PaymentChargeID");

                    b.HasIndex("VisitID");

                    b.ToTable("PaymentLedger");
                });

            modelBuilder.Entity("MediFusionPM.Models.POS", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .HasMaxLength(70);

                    b.Property<string>("PosCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("POS");
                });

            modelBuilder.Entity("MediFusionPM.Models.Practice", b =>
                {
                    b.Property<long>("ID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("AppointmentPhoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("AppointmentPhoneNumberExt")
                        .HasMaxLength(4);

                    b.Property<string>("CLIANumber")
                        .HasMaxLength(20);

                    b.Property<string>("CellNumber")
                        .HasMaxLength(10);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("ClientCategory");

                    b.Property<long?>("ClientID");

                    b.Property<string>("ContactPersonName");

                    b.Property<long?>("DefaultLocationID");

                    b.Property<string>("EHRSoftwareName");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<decimal?>("FTEPerDayRate");

                    b.Property<decimal?>("FTEPerMonthRate");

                    b.Property<decimal?>("FTEPerWeekRate");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<bool?>("IncludePatientCollection");

                    b.Property<string>("InvoicePercentage");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutoDownloading");

                    b.Property<bool>("IsAutoFollowup");

                    b.Property<bool>("IsAutoSubmission");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("MinimumMonthlyAmount");

                    b.Property<string>("NPI")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int?>("NumberOfFullTimeEmployees");

                    b.Property<string>("OfficePhoneNum")
                        .HasMaxLength(10);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("PLDDirectory")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PMSoftwareName");

                    b.Property<string>("PayToAddress1")
                        .HasMaxLength(55);

                    b.Property<string>("PayToAddress2")
                        .HasMaxLength(55);

                    b.Property<string>("PayToCity")
                        .HasMaxLength(20);

                    b.Property<string>("PayToState")
                        .HasMaxLength(2);

                    b.Property<string>("PayToZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("PhoneNumExt")
                        .HasMaxLength(4);

                    b.Property<string>("ProvFirstName")
                        .HasMaxLength(35);

                    b.Property<string>("ProvLastName")
                        .HasMaxLength(35);

                    b.Property<string>("ProvMiddleInitial")
                        .HasMaxLength(3);

                    b.Property<string>("RefferedBy");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<long?>("StatementAgingDays");

                    b.Property<string>("StatementExportType");

                    b.Property<string>("StatementFaxNumber")
                        .HasMaxLength(10);

                    b.Property<long?>("StatementMaxCount");

                    b.Property<string>("StatementMessage");

                    b.Property<string>("StatementPhoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("StatementPhoneNumberExt")
                        .HasMaxLength(4);

                    b.Property<string>("TaxID")
                        .HasMaxLength(9);

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(10);

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("UserPracticesPracticeID");

                    b.Property<string>("UserPracticesUserID");

                    b.Property<string>("Website");

                    b.Property<string>("WorkingHours");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("UserPracticesUserID", "UserPracticesPracticeID");

                    b.ToTable("Practice");
                });

            modelBuilder.Entity("MediFusionPM.Models.PracticeResponsibilities", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool?>("IsBillingCompanyResponsibility");

                    b.Property<bool?>("IsClientCompanyResponsibility");

                    b.Property<string>("Name");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("PracticeID");

                    b.ToTable("PracticeResponsibilities");
                });

            modelBuilder.Entity("MediFusionPM.Models.Provider", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<bool?>("BillUnderProvider");

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("DEANumber");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("LicenceNumber");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(3);

                    b.Property<string>("NPI")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("OfficePhoneNum")
                        .HasMaxLength(10);

                    b.Property<string>("PayToAddress1")
                        .HasMaxLength(55);

                    b.Property<string>("PayToAddress2")
                        .HasMaxLength(55);

                    b.Property<string>("PayToCity")
                        .HasMaxLength(20);

                    b.Property<string>("PayToState")
                        .HasMaxLength(2);

                    b.Property<string>("PayToZipCode")
                        .HasMaxLength(9);

                    b.Property<string>("PhoneNumExt")
                        .HasMaxLength(4);

                    b.Property<long>("PracticeID");

                    b.Property<string>("ReferralDocumentFileName");

                    b.Property<bool?>("ReportTaxID");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(15);

                    b.Property<string>("UPINNumber");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.HasIndex("PracticeID");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("MediFusionPM.Models.ProviderSchedule", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<DateTime?>("FromTime");

                    b.Property<bool?>("InActive");

                    b.Property<long?>("LocationID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<bool>("OverBookAllowed");

                    b.Property<long>("ProviderID");

                    b.Property<int>("TimeInterval");

                    b.Property<DateTime?>("ToTime");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<DateTime?>("breakfrom");

                    b.Property<DateTime?>("breakto");

                    b.Property<string>("dayofWeek");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ProviderSchedule");
                });

            modelBuilder.Entity("MediFusionPM.Models.ProviderSlot", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("FromTime");

                    b.Property<long>("ProviderScheduleID");

                    b.Property<string>("Status");

                    b.Property<int>("TimeInterval");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("ToTime");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ProviderScheduleID");

                    b.ToTable("ProviderSlot");
                });

            modelBuilder.Entity("MediFusionPM.Models.Reason", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Reason");
                });

            modelBuilder.Entity("MediFusionPM.Models.Receiver", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("ElementSeperator");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("ErasDirectory");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("RepetitionSepeator");

                    b.Property<string>("ReportsDirectory");

                    b.Property<string>("SegmentSeperator");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("SubElementSeperator");

                    b.Property<string>("SubmissionDirectory");

                    b.Property<string>("SubmissionMethod");

                    b.Property<string>("SubmissionPort");

                    b.Property<string>("SubmissionURL");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Website");

                    b.Property<string>("X12_270_GS_03");

                    b.Property<string>("X12_270_ISA_01");

                    b.Property<string>("X12_270_ISA_03");

                    b.Property<string>("X12_270_ISA_05");

                    b.Property<string>("X12_270_ISA_07");

                    b.Property<string>("X12_270_ISA_08");

                    b.Property<string>("X12_270_NM1_40_ReceiverID");

                    b.Property<string>("X12_270_NM1_40_ReceiverName");

                    b.Property<string>("X12_276_GS_03");

                    b.Property<string>("X12_276_ISA_01");

                    b.Property<string>("X12_276_ISA_03");

                    b.Property<string>("X12_276_ISA_05");

                    b.Property<string>("X12_276_ISA_07");

                    b.Property<string>("X12_276_ISA_08");

                    b.Property<string>("X12_276_NM1_40_ReceiverID");

                    b.Property<string>("X12_276_NM1_40_ReceiverName");

                    b.Property<string>("X12_837_GS_03");

                    b.Property<string>("X12_837_ISA_01");

                    b.Property<string>("X12_837_ISA_03");

                    b.Property<string>("X12_837_ISA_05");

                    b.Property<string>("X12_837_ISA_07");

                    b.Property<string>("X12_837_ISA_08");

                    b.Property<string>("X12_837_NM1_40_ReceiverID");

                    b.Property<string>("X12_837_NM1_40_ReceiverName");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("MediFusionPM.Models.RefProvider", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address1")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(3);

                    b.Property<string>("NPI")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("OfficePhoneNum")
                        .HasMaxLength(10);

                    b.Property<long?>("PracticeID");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("TaxID")
                        .HasMaxLength(9);

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(10);

                    b.Property<string>("Title");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.HasIndex("PracticeID");

                    b.ToTable("RefProvider");
                });

            modelBuilder.Entity("MediFusionPM.Models.RemarkCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("RemarkCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.ReportsLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("ClientID");

                    b.Property<int>("FilesCount");

                    b.Property<bool>("ManualImport");

                    b.Property<bool?>("Processed");

                    b.Property<long?>("ReceiverID");

                    b.Property<long?>("SubmitterID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<bool?>("UserResolved");

                    b.Property<string>("ZipFilePath");

                    b.HasKey("ID");

                    b.ToTable("ReportsLog");
                });

            modelBuilder.Entity("MediFusionPM.Models.ResubmitHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("ChargeID");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("VisitID");

                    b.ToTable("ResubmitHistory");
                });

            modelBuilder.Entity("MediFusionPM.Models.RevenueCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("OtherOutPatientBillingLimitations");

                    b.Property<string>("OutPatientPaymentDisposition");

                    b.Property<string>("OutPatientUnitRestrictions");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("RevenueCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.Rights", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("AdjustmentCodesCreate");

                    b.Property<bool>("AdjustmentCodesDelete");

                    b.Property<bool>("AdjustmentCodesEdit");

                    b.Property<bool>("AdjustmentCodesExport");

                    b.Property<bool>("AdjustmentCodesImport");

                    b.Property<bool>("AdjustmentCodesSearch");

                    b.Property<string>("AssignedByUserId");

                    b.Property<bool>("CPTCreate");

                    b.Property<bool>("CPTDelete");

                    b.Property<bool>("CPTEdit");

                    b.Property<bool>("CPTExport");

                    b.Property<bool>("CPTImport");

                    b.Property<bool>("CPTSearch");

                    b.Property<bool>("ChargesCreate");

                    b.Property<bool>("ChargesDelete");

                    b.Property<bool>("ChargesEdit");

                    b.Property<bool>("ChargesExport");

                    b.Property<bool>("ChargesImport");

                    b.Property<bool>("ChargesSearch");

                    b.Property<bool>("ClaimStatusCategoryCodesCreate");

                    b.Property<bool>("ClaimStatusCategoryCodesDelete");

                    b.Property<bool>("ClaimStatusCategoryCodesEdit");

                    b.Property<bool>("ClaimStatusCategoryCodesExport");

                    b.Property<bool>("ClaimStatusCategoryCodesImport");

                    b.Property<bool>("ClaimStatusCategoryCodesSearch");

                    b.Property<bool>("ClaimStatusCodesCreate");

                    b.Property<bool>("ClaimStatusCodesDelete");

                    b.Property<bool>("ClaimStatusCodesEdit");

                    b.Property<bool>("ClaimStatusCodesExport");

                    b.Property<bool>("ClaimStatusCodesImport");

                    b.Property<bool>("ClaimStatusCodesSearch");

                    b.Property<bool>("ClientCreate");

                    b.Property<bool>("ClientDelete");

                    b.Property<bool>("ClientEdit");

                    b.Property<bool>("ClientExport");

                    b.Property<bool>("ClientImport");

                    b.Property<bool>("ClientSearch");

                    b.Property<bool>("DeleteCheck");

                    b.Property<bool>("DeletePaymentVisit");

                    b.Property<bool>("DocumentsCreate");

                    b.Property<bool>("DocumentsDelete");

                    b.Property<bool>("DocumentsEdit");

                    b.Property<bool>("DocumentsExport");

                    b.Property<bool>("DocumentsImport");

                    b.Property<bool>("DocumentsSearch");

                    b.Property<bool>("EDIEligiBilityCreate");

                    b.Property<bool>("EDIEligiBilityDelete");

                    b.Property<bool>("EDIEligiBilityEdit");

                    b.Property<bool>("EDIEligiBilityExport");

                    b.Property<bool>("EDIEligiBilityImport");

                    b.Property<bool>("EDIEligiBilitySearch");

                    b.Property<bool>("EDIStatusCreate");

                    b.Property<bool>("EDIStatusDelete");

                    b.Property<bool>("EDIStatusEdit");

                    b.Property<bool>("EDIStatusExport");

                    b.Property<bool>("EDIStatusImport");

                    b.Property<bool>("EDIStatusSearch");

                    b.Property<bool>("EDISubmitCreate");

                    b.Property<bool>("EDISubmitDelete");

                    b.Property<bool>("EDISubmitEdit");

                    b.Property<bool>("EDISubmitExport");

                    b.Property<bool>("EDISubmitImport");

                    b.Property<bool>("EDISubmitSearch");

                    b.Property<bool>("FollowupCreate");

                    b.Property<bool>("FollowupDelete");

                    b.Property<bool>("FollowupEdit");

                    b.Property<bool>("FollowupExport");

                    b.Property<bool>("FollowupImport");

                    b.Property<bool>("FollowupSearch");

                    b.Property<bool>("ICDCreate");

                    b.Property<bool>("ICDDelete");

                    b.Property<bool>("ICDEdit");

                    b.Property<bool>("ICDExport");

                    b.Property<bool>("ICDImport");

                    b.Property<bool>("ICDSearch");

                    b.Property<bool>("InsuranceCreate");

                    b.Property<bool>("InsuranceDelete");

                    b.Property<bool>("InsuranceEdit");

                    b.Property<bool>("InsuranceExport");

                    b.Property<bool>("InsuranceImport");

                    b.Property<bool>("InsurancePlanAddressCreate");

                    b.Property<bool>("InsurancePlanAddressDelete");

                    b.Property<bool>("InsurancePlanAddressEdit");

                    b.Property<bool>("InsurancePlanAddressExport");

                    b.Property<bool>("InsurancePlanAddressImport");

                    b.Property<bool>("InsurancePlanAddressSearch");

                    b.Property<bool>("InsurancePlanCreate");

                    b.Property<bool>("InsurancePlanDelete");

                    b.Property<bool>("InsurancePlanEdit");

                    b.Property<bool>("InsurancePlanExport");

                    b.Property<bool>("InsurancePlanImport");

                    b.Property<bool>("InsurancePlanSearch");

                    b.Property<bool>("InsuranceSearch");

                    b.Property<bool>("LocationCreate");

                    b.Property<bool>("LocationDelete");

                    b.Property<bool>("LocationEdit");

                    b.Property<bool>("LocationExport");

                    b.Property<bool>("LocationImport");

                    b.Property<bool>("LocationSearch");

                    b.Property<bool>("ManualPosting");

                    b.Property<bool>("ManualPostingAdd");

                    b.Property<bool>("ManualPostingUpdate");

                    b.Property<bool>("ModifiersCreate");

                    b.Property<bool>("ModifiersDelete");

                    b.Property<bool>("ModifiersEdit");

                    b.Property<bool>("ModifiersExport");

                    b.Property<bool>("ModifiersImport");

                    b.Property<bool>("ModifiersSearch");

                    b.Property<bool>("POSCreate");

                    b.Property<bool>("POSDelete");

                    b.Property<bool>("POSEdit");

                    b.Property<bool>("POSExport");

                    b.Property<bool>("POSImport");

                    b.Property<bool>("POSSearch");

                    b.Property<bool>("PatientCreate");

                    b.Property<bool>("PatientDelete");

                    b.Property<bool>("PatientEdit");

                    b.Property<bool>("PatientExport");

                    b.Property<bool>("PatientImport");

                    b.Property<bool>("PatientSearch");

                    b.Property<bool>("PaymentsCreate");

                    b.Property<bool>("PaymentsDelete");

                    b.Property<bool>("PaymentsEdit");

                    b.Property<bool>("PaymentsExport");

                    b.Property<bool>("PaymentsImport");

                    b.Property<bool>("PaymentsSearch");

                    b.Property<bool>("PostCheckSearch");

                    b.Property<bool>("PostExport");

                    b.Property<bool>("PostImport");

                    b.Property<bool>("Postcheck");

                    b.Property<bool>("PracticeCreate");

                    b.Property<bool>("PracticeDelete");

                    b.Property<bool>("PracticeEdit");

                    b.Property<bool>("PracticeExport");

                    b.Property<bool>("PracticeImport");

                    b.Property<bool>("PracticeSearch");

                    b.Property<bool>("ProviderCreate");

                    b.Property<bool>("ProviderDelete");

                    b.Property<bool>("ProviderEdit");

                    b.Property<bool>("ProviderExport");

                    b.Property<bool>("ProviderImport");

                    b.Property<bool>("ProviderSearch");

                    b.Property<bool>("ReferringProviderCreate");

                    b.Property<bool>("ReferringProviderDelete");

                    b.Property<bool>("ReferringProviderEdit");

                    b.Property<bool>("ReferringProviderExport");

                    b.Property<bool>("ReferringProviderImport");

                    b.Property<bool>("ReferringProviderSearch");

                    b.Property<bool>("RemarkCodesCreate");

                    b.Property<bool>("RemarkCodesDelete");

                    b.Property<bool>("RemarkCodesEdit");

                    b.Property<bool>("RemarkCodesExport");

                    b.Property<bool>("RemarkCodesImport");

                    b.Property<bool>("RemarkCodesSearch");

                    b.Property<bool>("ReportsCreate");

                    b.Property<bool>("ReportsDelete");

                    b.Property<bool>("ReportsEdit");

                    b.Property<bool>("ReportsExport");

                    b.Property<bool>("ReportsImport");

                    b.Property<bool>("ReportsSearch");

                    b.Property<bool>("SchedulerCreate");

                    b.Property<bool>("SchedulerDelete");

                    b.Property<bool>("SchedulerEdit");

                    b.Property<bool>("SchedulerExport");

                    b.Property<bool>("SchedulerImport");

                    b.Property<bool>("SchedulerSearch");

                    b.Property<bool>("SubmissionsCreate");

                    b.Property<bool>("SubmissionsDelete");

                    b.Property<bool>("SubmissionsEdit");

                    b.Property<bool>("SubmissionsExport");

                    b.Property<bool>("SubmissionsImport");

                    b.Property<bool>("SubmissionsSearch");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<bool>("UserCreate");

                    b.Property<bool>("UserDelete");

                    b.Property<bool>("UserEdit");

                    b.Property<bool>("UserExport");

                    b.Property<bool>("UserImport");

                    b.Property<bool>("UserSearch");

                    b.Property<bool>("addPaymentVisit");

                    b.Property<bool>("batchdocumentCreate");

                    b.Property<bool>("batchdocumentDelete");

                    b.Property<bool>("batchdocumentExport");

                    b.Property<bool>("batchdocumentImport");

                    b.Property<bool>("batchdocumentSearch");

                    b.Property<bool>("batchdocumentUpdate");

                    b.Property<bool>("electronicsSubmissionResubmit");

                    b.Property<bool>("electronicsSubmissionSearch");

                    b.Property<bool>("electronicsSubmissionSubmit");

                    b.Property<bool>("groupCreate");

                    b.Property<bool>("groupDelete");

                    b.Property<bool>("groupExport");

                    b.Property<bool>("groupImport");

                    b.Property<bool>("groupSearch");

                    b.Property<bool>("groupUpdate");

                    b.Property<bool>("paperSubmissionResubmit");

                    b.Property<bool>("paperSubmissionSearch");

                    b.Property<bool>("paperSubmissionSubmit");

                    b.Property<bool>("patientFollowupCreate");

                    b.Property<bool>("patientFollowupDelete");

                    b.Property<bool>("patientFollowupExport");

                    b.Property<bool>("patientFollowupImport");

                    b.Property<bool>("patientFollowupSearch");

                    b.Property<bool>("patientFollowupUpdate");

                    b.Property<bool>("patientPaymentCreate");

                    b.Property<bool>("patientPaymentDelete");

                    b.Property<bool>("patientPaymentExport");

                    b.Property<bool>("patientPaymentImport");

                    b.Property<bool>("patientPaymentSearch");

                    b.Property<bool>("patientPaymentUpdate");

                    b.Property<bool>("patientPlanCreate");

                    b.Property<bool>("patientPlanDelete");

                    b.Property<bool>("patientPlanExport");

                    b.Property<bool>("patientPlanImport");

                    b.Property<bool>("patientPlanSearch");

                    b.Property<bool>("patientPlanUpdate");

                    b.Property<bool>("performEligibility");

                    b.Property<bool>("planFollowupCreate");

                    b.Property<bool>("planFollowupDelete");

                    b.Property<bool>("planFollowupExport");

                    b.Property<bool>("planFollowupImport");

                    b.Property<bool>("planFollowupSearch");

                    b.Property<bool>("planFollowupUpdate");

                    b.Property<bool>("reasonCreate");

                    b.Property<bool>("reasonDelete");

                    b.Property<bool>("reasonExport");

                    b.Property<bool>("reasonImport");

                    b.Property<bool>("reasonSearch");

                    b.Property<bool>("reasonUpdate");

                    b.Property<bool>("receiverCreate");

                    b.Property<bool>("receiverDelete");

                    b.Property<bool>("receiverExport");

                    b.Property<bool>("receiverImport");

                    b.Property<bool>("receiverSearch");

                    b.Property<bool>("receiverupdate");

                    b.Property<bool>("resubmitCharges");

                    b.Property<bool>("submissionLogSearch");

                    b.Property<bool>("submitterCreate");

                    b.Property<bool>("submitterDelete");

                    b.Property<bool>("submitterExport");

                    b.Property<bool>("submitterImport");

                    b.Property<bool>("submitterSearch");

                    b.Property<bool>("submitterUpdate");

                    b.Property<bool>("teamCreate");

                    b.Property<bool>("teamDelete");

                    b.Property<bool>("teamExport");

                    b.Property<bool>("teamImport");

                    b.Property<bool>("teamSearch");

                    b.Property<bool>("teamupdate");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("MediFusionPM.Models.Rooms", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Inactive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long?>("PracticeID");

                    b.Property<long?>("ProviderID");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MediFusionPM.Models.Settings", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long>("ClientID");

                    b.Property<string>("DocumentServerAuthPass");

                    b.Property<string>("DocumentServerAuthUser");

                    b.Property<string>("DocumentServerDirectory");

                    b.Property<string>("DocumentServerURL");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MediFusionPM.Models.StatusCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("StatusCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.SubmissionLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AK9_ErrorCode");

                    b.Property<string>("AK9_Status");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal>("ClaimAmount");

                    b.Property<long>("ClaimCount");

                    b.Property<long>("ClientID");

                    b.Property<long?>("DownloadedFileID");

                    b.Property<string>("FormType");

                    b.Property<string>("IK5_ErrorCode");

                    b.Property<string>("IK5_Status");

                    b.Property<string>("ISAControlNumber");

                    b.Property<int?>("NoOfAcceptedST");

                    b.Property<int?>("NoOfReceivedST");

                    b.Property<int?>("NoOfTotalST");

                    b.Property<string>("Notes");

                    b.Property<string>("PdfPath");

                    b.Property<long>("ReceiverID");

                    b.Property<string>("SubmitType");

                    b.Property<long>("SubmitterID");

                    b.Property<string>("Transaction837Path");

                    b.Property<string>("Transaction999Path");

                    b.Property<string>("Trasaction277CAPath");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("SubmissionLog");
                });

            modelBuilder.Entity("MediFusionPM.Models.Submitter", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address")
                        .HasMaxLength(55);

                    b.Property<string>("Address2")
                        .HasMaxLength(55);

                    b.Property<bool?>("AutoDownloading");

                    b.Property<bool?>("AutoSubmission");

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<long>("ClientID");

                    b.Property<string>("FileName");

                    b.Property<bool>("ManualSubmission");

                    b.Property<string>("Name");

                    b.Property<long>("ReceiverID");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("SubmissionPassword");

                    b.Property<string>("SubmissionUserName");

                    b.Property<string>("SubmitterContactNumber");

                    b.Property<string>("SubmitterContactPerson");

                    b.Property<string>("SubmitterEmail")
                        .HasMaxLength(60);

                    b.Property<string>("SubmitterFaxNumber");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("X12_270_GS_02");

                    b.Property<string>("X12_270_ISA_02");

                    b.Property<string>("X12_270_ISA_04");

                    b.Property<string>("X12_270_ISA_06");

                    b.Property<string>("X12_270_NM1_41_SubmitterID");

                    b.Property<string>("X12_270_NM1_41_SubmitterName");

                    b.Property<string>("X12_276_GS_02");

                    b.Property<string>("X12_276_ISA_02");

                    b.Property<string>("X12_276_ISA_04");

                    b.Property<string>("X12_276_ISA_06");

                    b.Property<string>("X12_276_NM1_41_SubmitterID");

                    b.Property<string>("X12_276_NM1_41_SubmitterName");

                    b.Property<string>("X12_837_GS_02");

                    b.Property<string>("X12_837_ISA_02");

                    b.Property<string>("X12_837_ISA_04");

                    b.Property<string>("X12_837_ISA_06");

                    b.Property<string>("X12_837_NM1_41_SubmitterID");

                    b.Property<string>("X12_837_NM1_41_SubmitterName");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Submitter");
                });

            modelBuilder.Entity("MediFusionPM.Models.Taxonomy", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AMADescription");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("NUCCCode");

                    b.Property<string>("NUCCDescription");

                    b.Property<string>("Speciality");

                    b.Property<string>("SpecialityType");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Taxonomy");
                });

            modelBuilder.Entity("MediFusionPM.Models.Team", b =>
                {
                    b.Property<long>("ID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Details");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.Models.PaymentCharge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("AdjustmentAmount1");

                    b.Property<decimal?>("AdjustmentAmount2");

                    b.Property<decimal?>("AdjustmentAmount3");

                    b.Property<decimal?>("AdjustmentAmount4");

                    b.Property<decimal?>("AdjustmentAmount5");

                    b.Property<long?>("AdjustmentCodeID1");

                    b.Property<long?>("AdjustmentCodeID2");

                    b.Property<long?>("AdjustmentCodeID3");

                    b.Property<long?>("AdjustmentCodeID4");

                    b.Property<long?>("AdjustmentCodeID5");

                    b.Property<string>("AdjustmentQuantity1");

                    b.Property<string>("AdjustmentQuantity2");

                    b.Property<string>("AdjustmentQuantity3");

                    b.Property<string>("AdjustmentQuantity4");

                    b.Property<string>("AdjustmentQuantity5");

                    b.Property<decimal?>("AllowedAmount");

                    b.Property<bool>("AppliedToSec");

                    b.Property<decimal?>("BilledAmount");

                    b.Property<string>("CPTCode");

                    b.Property<string>("ChargeControlNumber");

                    b.Property<long?>("ChargeID");

                    b.Property<decimal?>("CoinsuranceAmount");

                    b.Property<string>("Comments");

                    b.Property<decimal?>("Copay");

                    b.Property<DateTime?>("DOSFrom");

                    b.Property<DateTime?>("DOSTo");

                    b.Property<decimal?>("DeductableAmount");

                    b.Property<string>("GroupCode1");

                    b.Property<string>("GroupCode2");

                    b.Property<string>("GroupCode3");

                    b.Property<string>("GroupCode4");

                    b.Property<string>("GroupCode5");

                    b.Property<string>("Modifier1");

                    b.Property<string>("Modifier2");

                    b.Property<string>("Modifier3");

                    b.Property<string>("Modifier4");

                    b.Property<decimal?>("OtherPatResp");

                    b.Property<decimal?>("PaidAmount");

                    b.Property<decimal?>("PatientAmount");

                    b.Property<long?>("PaymentVisitID");

                    b.Property<string>("PostedBy");

                    b.Property<DateTime?>("PostedDate");

                    b.Property<long?>("RemarkCodeID1");

                    b.Property<long?>("RemarkCodeID2");

                    b.Property<long?>("RemarkCodeID3");

                    b.Property<long?>("RemarkCodeID4");

                    b.Property<long?>("RemarkCodeID5");

                    b.Property<string>("RevenueCode");

                    b.Property<string>("Status");

                    b.Property<string>("Units");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal?>("WriteoffAmount");

                    b.HasKey("ID");

                    b.HasIndex("AdjustmentCodeID1");

                    b.HasIndex("AdjustmentCodeID2");

                    b.HasIndex("AdjustmentCodeID3");

                    b.HasIndex("AdjustmentCodeID4");

                    b.HasIndex("AdjustmentCodeID5");

                    b.HasIndex("ChargeID");

                    b.HasIndex("PaymentVisitID");

                    b.HasIndex("RemarkCodeID1");

                    b.HasIndex("RemarkCodeID2");

                    b.HasIndex("RemarkCodeID3");

                    b.HasIndex("RemarkCodeID4");

                    b.HasIndex("RemarkCodeID5");

                    b.ToTable("PaymentCharge");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.Models.PaymentVisit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("AllowedAmount");

                    b.Property<long?>("BatchDocumentID");

                    b.Property<decimal?>("BilledAmount");

                    b.Property<string>("ClaimNumber");

                    b.Property<DateTime?>("ClaimStatementFromDate");

                    b.Property<DateTime?>("ClaimStatementToDate");

                    b.Property<string>("Comments");

                    b.Property<string>("ForwardedPayerID");

                    b.Property<string>("ForwardedPayerName");

                    b.Property<string>("InsuredFirstName")
                        .HasMaxLength(30);

                    b.Property<string>("InsuredID");

                    b.Property<string>("InsuredLastName")
                        .HasMaxLength(30);

                    b.Property<int>("MyProperty");

                    b.Property<string>("PageNumber");

                    b.Property<decimal?>("PaidAmount");

                    b.Property<decimal?>("PatientAmount");

                    b.Property<string>("PatientFIrstName")
                        .HasMaxLength(30);

                    b.Property<long?>("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(30);

                    b.Property<string>("PayerContactNumber")
                        .HasMaxLength(10);

                    b.Property<string>("PayerICN");

                    b.Property<DateTime?>("PayerReceivedDate");

                    b.Property<long?>("PaymentCheckID");

                    b.Property<string>("PostedBy");

                    b.Property<DateTime?>("PostedDate");

                    b.Property<string>("ProcessedAs");

                    b.Property<string>("ProvFirstName")
                        .HasMaxLength(30);

                    b.Property<string>("ProvLastName")
                        .HasMaxLength(30);

                    b.Property<string>("ProvNPI");

                    b.Property<string>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.Property<decimal?>("WriteOffAmount");

                    b.HasKey("ID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PaymentCheckID");

                    b.HasIndex("VisitID");

                    b.ToTable("PaymentVisit");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.Models.PlanType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("PlanType");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PatientFollowUp", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("AdjustmentCodeID");

                    b.Property<long?>("GroupID");

                    b.Property<string>("Notes");

                    b.Property<long?>("PatientID");

                    b.Property<long?>("PaymentVisitID");

                    b.Property<long?>("ReasonID");

                    b.Property<bool>("Resolved");

                    b.Property<DateTime?>("Statement1SentDate");

                    b.Property<DateTime?>("Statement2SentDate");

                    b.Property<DateTime?>("Statement3SentDate");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("TickleDate")
                        .HasColumnType("Date");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ReasonID");

                    b.ToTable("PatientFollowUp");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PlanFollowup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("AdjustmentCodeID");

                    b.Property<long?>("GroupID");

                    b.Property<string>("Notes");

                    b.Property<long?>("PaymentVisitID");

                    b.Property<long?>("ReasonID");

                    b.Property<string>("RemitCode");

                    b.Property<bool>("Resolved");

                    b.Property<DateTime?>("TickleDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("VisitID");

                    b.Property<long?>("VisitStatusID");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("AdjustmentCodeID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PaymentVisitID");

                    b.HasIndex("ReasonID");

                    b.HasIndex("VisitID");

                    b.HasIndex("VisitStatusID");

                    b.ToTable("PlanFollowUp");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PlanFollowupCharge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<long?>("AdjustmentCodeID");

                    b.Property<long?>("ChargeID");

                    b.Property<long?>("GroupID");

                    b.Property<string>("Notes");

                    b.Property<long?>("PaymentChargeID");

                    b.Property<long?>("PlanFollowupID");

                    b.Property<long?>("ReasonID");

                    b.Property<long?>("RemarkCode1ID");

                    b.Property<long?>("RemarkCode2ID");

                    b.Property<long?>("RemarkCode3ID");

                    b.Property<long?>("RemarkCode4ID");

                    b.Property<long?>("RemarkCodeID");

                    b.Property<DateTime?>("TickleDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("ChargeID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PaymentChargeID");

                    b.HasIndex("PlanFollowupID");

                    b.HasIndex("ReasonID");

                    b.HasIndex("RemarkCode2ID");

                    b.HasIndex("RemarkCode3ID");

                    b.HasIndex("RemarkCode4ID");

                    b.HasIndex("RemarkCodeID");

                    b.ToTable("PlanFollowupCharge");
                });

            modelBuilder.Entity("MediFusionPM.Models.TypeOfFacility", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("TypeOfFacility");
                });

            modelBuilder.Entity("MediFusionPM.Models.TypeOfService", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("TypeOfService");
                });

            modelBuilder.Entity("MediFusionPM.Models.UserPractices", b =>
                {
                    b.Property<string>("UserID");

                    b.Property<long>("PracticeID");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("AssignedByUserId");

                    b.Property<bool>("Status");

                    b.Property<string>("UPALastModified");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("UserID", "PracticeID");

                    b.ToTable("UserPractices");
                });

            modelBuilder.Entity("MediFusionPM.Models.ValueCode", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("ValueCode");
                });

            modelBuilder.Entity("MediFusionPM.Models.Visit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccidentDate")
                        .HasColumnType("Date");

                    b.Property<string>("AccidentState")
                        .HasMaxLength(2);

                    b.Property<string>("AccidentType");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("Date");

                    b.Property<long?>("AttendingProviderID");

                    b.Property<string>("AuthorizationNum");

                    b.Property<long?>("BatchDocumentID");

                    b.Property<string>("ClaimFrequencyCode");

                    b.Property<string>("ClaimNotes");

                    b.Property<string>("CliaNumber");

                    b.Property<long>("ClientID");

                    b.Property<decimal?>("Coinsurance");

                    b.Property<decimal?>("Copay");

                    b.Property<decimal?>("CopayPaid");

                    b.Property<DateTime?>("DateOfPregnancy")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DateOfServiceFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("Date");

                    b.Property<decimal?>("Deductible");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("Date");

                    b.Property<decimal?>("Discount");

                    b.Property<bool?>("DocumentBatchApplied");

                    b.Property<bool?>("EPSDT");

                    b.Property<bool?>("Emergency");

                    b.Property<string>("ExternalInvoiceNumber");

                    b.Property<bool?>("FamilyPlan");

                    b.Property<DateTime?>("FirstDateOfSimiliarIllness")
                        .HasColumnType("Date");

                    b.Property<long?>("ICD10ID");

                    b.Property<long?>("ICD11ID");

                    b.Property<long?>("ICD12ID");

                    b.Property<long>("ICD1ID");

                    b.Property<long?>("ICD2ID");

                    b.Property<long?>("ICD3ID");

                    b.Property<long?>("ICD4ID");

                    b.Property<long?>("ICD5ID");

                    b.Property<long?>("ICD6ID");

                    b.Property<long?>("ICD7ID");

                    b.Property<long?>("ICD8ID");

                    b.Property<long?>("ICD9ID");

                    b.Property<DateTime?>("IllnessTreatmentDate")
                        .HasColumnType("Date");

                    b.Property<bool?>("IsDontPrint");

                    b.Property<bool?>("IsForcePaper");

                    b.Property<bool?>("IsReversalApplied");

                    b.Property<bool>("IsSubmitted");

                    b.Property<decimal?>("LabCharges");

                    b.Property<DateTime?>("LastSeenDate");

                    b.Property<DateTime?>("LastStatementDate");

                    b.Property<DateTime?>("LastXrayDate")
                        .HasColumnType("Date");

                    b.Property<string>("LastXrayType");

                    b.Property<long>("LocationID");

                    b.Property<decimal?>("MovedToAdvancePayment");

                    b.Property<DateTime?>("OnsetDateOfIllness")
                        .HasColumnType("Date");

                    b.Property<long?>("OperatingProviderID");

                    b.Property<long?>("OrderingProvID");

                    b.Property<decimal?>("OtherPatResp");

                    b.Property<bool?>("OutsideLab");

                    b.Property<bool>("OutsideReferral");

                    b.Property<long>("POSID");

                    b.Property<string>("PageNumber");

                    b.Property<decimal?>("PatientAmount");

                    b.Property<long?>("PatientAppointmentID");

                    b.Property<long>("PatientID");

                    b.Property<decimal?>("PatientPaid");

                    b.Property<string>("PayerClaimControlNum");

                    b.Property<long>("PracticeID");

                    b.Property<string>("PrescribingMD");

                    b.Property<decimal?>("PrimaryAllowed");

                    b.Property<decimal?>("PrimaryBal");

                    b.Property<decimal?>("PrimaryBilledAmount");

                    b.Property<decimal?>("PrimaryPaid");

                    b.Property<decimal?>("PrimaryPatientBal");

                    b.Property<long?>("PrimaryPatientPlanID");

                    b.Property<DateTime?>("PrimaryPaymentDate");

                    b.Property<string>("PrimaryStatus");

                    b.Property<decimal?>("PrimaryTransferred");

                    b.Property<decimal?>("PrimaryWriteOff");

                    b.Property<long>("ProviderID");

                    b.Property<long?>("RefProviderID");

                    b.Property<string>("ReferralNum");

                    b.Property<string>("RejectionReason");

                    b.Property<decimal?>("SecondaryAllowed");

                    b.Property<decimal?>("SecondaryBal");

                    b.Property<decimal?>("SecondaryBilledAmount");

                    b.Property<decimal?>("SecondaryPaid");

                    b.Property<decimal?>("SecondaryPatResp");

                    b.Property<decimal?>("SecondaryPatientBal");

                    b.Property<long?>("SecondaryPatientPlanID");

                    b.Property<DateTime?>("SecondaryPaymentDate");

                    b.Property<string>("SecondaryStatus");

                    b.Property<decimal?>("SecondaryTransferred");

                    b.Property<decimal?>("SecondaryWriteOff");

                    b.Property<string>("ServiceAuthExcpCode");

                    b.Property<int?>("StatementStatus");

                    b.Property<long?>("SubmissionLogID");

                    b.Property<long?>("SubmissionLogID2");

                    b.Property<long?>("SubmissionLogID3");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("Date");

                    b.Property<long?>("SupervisingProvID");

                    b.Property<decimal?>("TertiaryAllowed");

                    b.Property<decimal?>("TertiaryBal");

                    b.Property<decimal?>("TertiaryBilledAmount");

                    b.Property<decimal?>("TertiaryPaid");

                    b.Property<decimal?>("TertiaryPatResp");

                    b.Property<decimal?>("TertiaryPatientBal");

                    b.Property<long?>("TertiaryPatientPlanID");

                    b.Property<string>("TertiaryStatus");

                    b.Property<decimal?>("TertiaryTransferred");

                    b.Property<decimal?>("TertiaryWriteOff");

                    b.Property<decimal?>("TotalAmount");

                    b.Property<DateTime?>("UnableToWorkFromDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("UnableToWorkToDate")
                        .HasColumnType("Date");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ValidationMessage");

                    b.HasKey("ID");

                    b.HasIndex("AttendingProviderID");

                    b.HasIndex("BatchDocumentID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ICD10ID");

                    b.HasIndex("ICD11ID");

                    b.HasIndex("ICD12ID");

                    b.HasIndex("ICD1ID");

                    b.HasIndex("ICD2ID");

                    b.HasIndex("ICD3ID");

                    b.HasIndex("ICD4ID");

                    b.HasIndex("ICD5ID");

                    b.HasIndex("ICD6ID");

                    b.HasIndex("ICD7ID");

                    b.HasIndex("ICD8ID");

                    b.HasIndex("ICD9ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("OperatingProviderID");

                    b.HasIndex("OrderingProvID");

                    b.HasIndex("POSID");

                    b.HasIndex("PatientAppointmentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PracticeID");

                    b.HasIndex("PrimaryPatientPlanID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RefProviderID");

                    b.HasIndex("SecondaryPatientPlanID");

                    b.HasIndex("SubmissionLogID");

                    b.HasIndex("SubmissionLogID2");

                    b.HasIndex("SubmissionLogID3");

                    b.HasIndex("SupervisingProvID");

                    b.HasIndex("TertiaryPatientPlanID");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("MediFusionPM.Models.VisitReason", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("VisitReason");
                });

            modelBuilder.Entity("MediFusionPM.Models.VisitStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<decimal?>("BilledAmount");

                    b.Property<string>("CategoryCode1");

                    b.Property<string>("CategoryCode2");

                    b.Property<string>("CategoryCode3");

                    b.Property<string>("CategoryCodeDesc1");

                    b.Property<string>("CategoryCodeDesc2");

                    b.Property<string>("CategoryCodeDesc3");

                    b.Property<DateTime?>("CheckDate");

                    b.Property<string>("CheckNumber");

                    b.Property<DateTime?>("DOS");

                    b.Property<string>("EntityCode1");

                    b.Property<string>("EntityCode2");

                    b.Property<string>("EntityCode3");

                    b.Property<string>("EntityCodeDesc1");

                    b.Property<string>("EntityCodeDesc2");

                    b.Property<string>("EntityCodeDesc3");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("FreeText1");

                    b.Property<string>("FreeText2");

                    b.Property<string>("FreeText3");

                    b.Property<long?>("LocationID");

                    b.Property<decimal?>("PaidAmount");

                    b.Property<string>("PatientAddress");

                    b.Property<string>("PatientCity");

                    b.Property<DateTime>("PatientDOB");

                    b.Property<string>("PatientFN");

                    b.Property<string>("PatientGender");

                    b.Property<string>("PatientLN");

                    b.Property<string>("PatientMI");

                    b.Property<long?>("PatientPlanID");

                    b.Property<string>("PatientState");

                    b.Property<string>("PatientZip");

                    b.Property<string>("PayerControlNumber");

                    b.Property<string>("PayerID");

                    b.Property<string>("PayerName");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("ProviderFN");

                    b.Property<long?>("ProviderID");

                    b.Property<string>("ProviderLN");

                    b.Property<string>("ProviderNPI");

                    b.Property<string>("RejectionReason1");

                    b.Property<string>("RejectionReason2");

                    b.Property<string>("RejectionReason3");

                    b.Property<string>("ResponseEntity");

                    b.Property<string>("Status");

                    b.Property<string>("StatusCode1");

                    b.Property<string>("StatusCode2");

                    b.Property<string>("StatusCode3");

                    b.Property<string>("StatusCodeDesc1");

                    b.Property<string>("StatusCodeDesc2");

                    b.Property<string>("StatusCodeDesc3");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SubmitterTRN");

                    b.Property<string>("SubscriberAddress");

                    b.Property<string>("SubscriberCity");

                    b.Property<DateTime>("SubscriberDOB");

                    b.Property<string>("SubscriberFN");

                    b.Property<string>("SubscriberGender");

                    b.Property<string>("SubscriberID");

                    b.Property<string>("SubscriberLN");

                    b.Property<string>("SubscriberMI");

                    b.Property<string>("SubscriberState");

                    b.Property<string>("SubscriberZip");

                    b.Property<string>("TRNNumber");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<decimal>("VisitAmount");

                    b.Property<long?>("VisitID");

                    b.HasKey("ID");

                    b.ToTable("VisitStatus");
                });

            modelBuilder.Entity("MediFusionPM.Models.VisitStatusLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<long?>("DownloadedFileID");

                    b.Property<string>("Transaction276Path");

                    b.Property<string>("Transaction277CAPath");

                    b.Property<string>("Transaction277Path");

                    b.Property<string>("Transaction999Path");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("VisitStatusLog");
                });

            modelBuilder.Entity("MediFusionPM.ViewModel.AuthIdentityCustom", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BlockNote");

                    b.Property<long?>("ClientID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long?>("DesignationID");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsUserBlock");

                    b.Property<bool>("IsUserBlockByAdmin");

                    b.Property<bool>("IsUserLogin");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("LogInAttempts");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<long?>("PracticeID");

                    b.Property<string>("ReportingTo");

                    b.Property<string>("RightsId");

                    b.Property<string>("SecurityStamp");

                    b.Property<long?>("TeamID");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.HasIndex("DesignationID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PracticeID");

                    b.HasIndex("RightsId");

                    b.HasIndex("TeamID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication1.Models.Audit.DownloadedFileAudit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("ColumnName");

                    b.Property<string>("CurrentValue");

                    b.Property<string>("CurrentValueID");

                    b.Property<long>("DownloadedFileID");

                    b.Property<long?>("DownloadedFilesID");

                    b.Property<string>("HostName");

                    b.Property<string>("NewValue");

                    b.Property<string>("NewValueID");

                    b.Property<long>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("DownloadedFilesID");

                    b.ToTable("DownloadedFileAudit");
                });

            modelBuilder.Entity("MediFusionPM.Models.Action", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom", "AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MediFusionPM.Models.AdjustmentCode", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ActionAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.AdjustmentCodeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.BatchDocumentAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.BillerAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Biller", "Biller")
                        .WithMany()
                        .HasForeignKey("BillerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ChargeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ChargeSubmissionHistoryAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ChargeSubmissionHistory", "ChargeSubmissionHistory")
                        .WithMany()
                        .HasForeignKey("ChargeSubmissionHistoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ClientAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.CptAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt")
                        .WithMany()
                        .HasForeignKey("CptID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.DesignationsAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Designations", "Designations")
                        .WithMany()
                        .HasForeignKey("DesignationsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.DocumentTypeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi270PayerAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Edi270Payer", "Edi270Payer")
                        .WithMany()
                        .HasForeignKey("Edi270PayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi276PayerAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Edi276Payer", "Edi276Payer")
                        .WithMany()
                        .HasForeignKey("Edi276PayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.Edi837PayerAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Edi837Payer", "Edi837Payer")
                        .WithMany()
                        .HasForeignKey("Edi837PayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.GroupAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ICDAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ICD", "ICD")
                        .WithMany()
                        .HasForeignKey("ICDID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsuranceAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsuranceBillingoptionAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.InsuranceBillingoption", "InsuranceBillingoption")
                        .WithMany()
                        .HasForeignKey("InsuranceBillingoptionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsurancePlanAddressAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.InsurancePlanAddress", "InsurancePlanAddress")
                        .WithMany()
                        .HasForeignKey("InsurancePlanAddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.InsurancePlanAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.LocationAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ModifierAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.NotesAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Notes", "Notes")
                        .WithMany()
                        .HasForeignKey("NotesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.OnlinePortalCredentialsAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.OnlinePortalCredentials", "OnlinePortalCredentials")
                        .WithMany()
                        .HasForeignKey("OnlinePortalCredentialsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.OnlinePortalsAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.OnlinePortals", "OnlinePortals")
                        .WithMany()
                        .HasForeignKey("OnlinePortalsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientEligibility", "PatientEligibility")
                        .WithMany()
                        .HasForeignKey("PatientEligibilityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityDetailAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientEligibilityDetail", "PatientEligibilityDetail")
                        .WithMany()
                        .HasForeignKey("PatientEligibilityDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientEligibilityLogAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientEligibilityLog", "PatientEligibilityLog")
                        .WithMany()
                        .HasForeignKey("PatientEligibilityLogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientFollowUpAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.PatientFollowUp", "PatientFollowUp")
                        .WithMany()
                        .HasForeignKey("PatientFollowUpID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientFollowUpChargeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientFollowUpCharge", "PatientFollowUpCharge")
                        .WithMany()
                        .HasForeignKey("PatientFollowUpChargeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPaymentAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientPayment", "PatientPayment")
                        .WithMany()
                        .HasForeignKey("PatientPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPaymentChargeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientPaymentCharge", "PatientPaymentCharge")
                        .WithMany()
                        .HasForeignKey("PatientPaymentChargeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PatientPlanAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientPlan", "PatientPlan")
                        .WithMany()
                        .HasForeignKey("PatientPlanID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentChargeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentCharge", "PaymentCharge")
                        .WithMany()
                        .HasForeignKey("PaymentChargeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentCheckAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PaymentCheck", "PaymentCheck")
                        .WithMany()
                        .HasForeignKey("PaymentCheckID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentLedgerAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.PaymentLedger", "PaymentLedger")
                        .WithMany()
                        .HasForeignKey("PaymentLedgerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PaymentVisitAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentVisit", "PaymentVisit")
                        .WithMany()
                        .HasForeignKey("PaymentVisitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanFollowupAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.PlanFollowup", "PlanFollowup")
                        .WithMany()
                        .HasForeignKey("PlanFollowupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanFollowupChargeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.PlanFollowupCharge", "PlanFollowupCharge")
                        .WithMany()
                        .HasForeignKey("PlanFollowupChargeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PlanTypeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PlanType", "PlanType")
                        .WithMany()
                        .HasForeignKey("PlanTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.POSAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.POS", "POS")
                        .WithMany()
                        .HasForeignKey("POSID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.PracticeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderScheduleAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ProviderSchedule", "ProviderSchedule")
                        .WithMany()
                        .HasForeignKey("ProviderScheduleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ProviderSlotAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ProviderSlot", "ProviderSlot")
                        .WithMany()
                        .HasForeignKey("ProviderSlotID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReasonAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReceiverAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RefProviderAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.RefProvider", "RefProvider")
                        .WithMany()
                        .HasForeignKey("RefProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RemarkCodeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ReportsLogAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ReportsLog", "ReportsLog")
                        .WithMany()
                        .HasForeignKey("ReportsLogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.ResubmitHistoryAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.ResubmitHistory", "ResubmitHistory")
                        .WithMany()
                        .HasForeignKey("ResubmitHistoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.RightsAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Rights", "Rights")
                        .WithMany()
                        .HasForeignKey("RightsID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SettingsAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.StatusCodeAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.StatusCode", "StatusCode")
                        .WithMany()
                        .HasForeignKey("StatusCodeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SubmissionLogAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.SubmitterAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Submitter", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TaxonomyAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Taxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TeamAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.TypeOfServiceAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.TypeOfService", "TypeOfService")
                        .WithMany()
                        .HasForeignKey("TypeOfServiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitReasonAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.VisitReason", "VisitReason")
                        .WithMany()
                        .HasForeignKey("VisitReasonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitStatusAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.VisitStatus", "VisitStatus")
                        .WithMany()
                        .HasForeignKey("VisitStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Audit.VisitStatusLogAudit", b =>
                {
                    b.HasOne("MediFusionPM.Models.VisitStatusLog", "VisitStatusLog")
                        .WithMany()
                        .HasForeignKey("VisitStatusLogID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocument", b =>
                {
                    b.HasOne("MediFusionPM.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocumentCharges", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument")
                        .WithMany("BatchDocumentCharges")
                        .HasForeignKey("BatchDocumentNoID");
                });

            modelBuilder.Entity("MediFusionPM.Models.BatchDocumentPayment", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument")
                        .WithMany("BatchDocumentPayment")
                        .HasForeignKey("BatchDocumentNoID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Charge", b =>
                {
                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt")
                        .WithMany()
                        .HasForeignKey("CPTID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier1")
                        .WithMany()
                        .HasForeignKey("Modifier1ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier2")
                        .WithMany()
                        .HasForeignKey("Modifier2ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier3")
                        .WithMany()
                        .HasForeignKey("Modifier3ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier4")
                        .WithMany()
                        .HasForeignKey("Modifier4ID");

                    b.HasOne("MediFusionPM.Models.Provider", "OrderingProv")
                        .WithMany()
                        .HasForeignKey("OrderingProvID");

                    b.HasOne("MediFusionPM.Models.POS", "POS")
                        .WithMany()
                        .HasForeignKey("POSID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.PatientPlan", "PrimaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("PrimaryPatientPlanID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.RefProvider", "RefProvider")
                        .WithMany()
                        .HasForeignKey("RefProviderID");

                    b.HasOne("MediFusionPM.Models.RevenueCode", "RevenueCode")
                        .WithMany()
                        .HasForeignKey("RevenueCodeID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "SecondaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("SecondaryPatientPlanID");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog2")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID2");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog3")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID3");

                    b.HasOne("MediFusionPM.Models.Provider", "SupervisingProv")
                        .WithMany()
                        .HasForeignKey("SupervisingProvID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "TertiaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("TertiaryPatientPlanID");

                    b.HasOne("MediFusionPM.Models.Visit")
                        .WithMany("Charges")
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.ChargeSubmissionHistory", b =>
                {
                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "PatientPlan")
                        .WithMany()
                        .HasForeignKey("PatientPlanID");

                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID");
                });

            modelBuilder.Entity("MediFusionPM.Models.ClinicalFormsCPT", b =>
                {
                    b.HasOne("MediFusionPM.Models.ClinicalForms", "ClinicalForm")
                        .WithMany()
                        .HasForeignKey("ClinicalFormID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Cpt", b =>
                {
                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier1")
                        .WithMany()
                        .HasForeignKey("Modifier1ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier2")
                        .WithMany()
                        .HasForeignKey("Modifier2ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier3")
                        .WithMany()
                        .HasForeignKey("Modifier3ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier4")
                        .WithMany()
                        .HasForeignKey("Modifier4ID");

                    b.HasOne("MediFusionPM.Models.POS", "POS")
                        .WithMany()
                        .HasForeignKey("POSID");

                    b.HasOne("MediFusionPM.Models.TypeOfService", "TypeOfService")
                        .WithMany()
                        .HasForeignKey("TypeOfServiceID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi270Payer", b =>
                {
                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi276Payer", b =>
                {
                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Edi837Payer", b =>
                {
                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalCharge", b =>
                {
                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt")
                        .WithMany()
                        .HasForeignKey("CPTID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier1")
                        .WithMany()
                        .HasForeignKey("Modifier1ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier2")
                        .WithMany()
                        .HasForeignKey("Modifier2ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier3")
                        .WithMany()
                        .HasForeignKey("Modifier3ID");

                    b.HasOne("MediFusionPM.Models.Modifier", "Modifier4")
                        .WithMany()
                        .HasForeignKey("Modifier4ID");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalPatient", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.HasOne("MediFusionPM.Models.RefProvider", "RefProvider")
                        .WithMany()
                        .HasForeignKey("RefProviderID");
                });

            modelBuilder.Entity("MediFusionPM.Models.ExternalPayment", b =>
                {
                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt")
                        .WithMany()
                        .HasForeignKey("CPTID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Group", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom", "AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MediFusionPM.Models.InstitutionalData", b =>
                {
                    b.HasOne("MediFusionPM.Models.AdmissionSourceCode", "AdmissionSourceCode")
                        .WithMany()
                        .HasForeignKey("AdmissionSourceCodeID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode10")
                        .WithMany()
                        .HasForeignKey("ConditionCode10ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode11")
                        .WithMany()
                        .HasForeignKey("ConditionCode11ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode12")
                        .WithMany()
                        .HasForeignKey("ConditionCode12ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode1")
                        .WithMany()
                        .HasForeignKey("ConditionCode1ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode2")
                        .WithMany()
                        .HasForeignKey("ConditionCode2ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode3")
                        .WithMany()
                        .HasForeignKey("ConditionCode3ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode4")
                        .WithMany()
                        .HasForeignKey("ConditionCode4ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode5")
                        .WithMany()
                        .HasForeignKey("ConditionCode5ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode6")
                        .WithMany()
                        .HasForeignKey("ConditionCode6ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode7")
                        .WithMany()
                        .HasForeignKey("ConditionCode7ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode8")
                        .WithMany()
                        .HasForeignKey("ConditionCode8ID");

                    b.HasOne("MediFusionPM.Models.ConditionCode", "ConditionCode9")
                        .WithMany()
                        .HasForeignKey("ConditionCode9ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt1")
                        .WithMany()
                        .HasForeignKey("Cpt1ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt2")
                        .WithMany()
                        .HasForeignKey("Cpt2ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt3")
                        .WithMany()
                        .HasForeignKey("Cpt3ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt4")
                        .WithMany()
                        .HasForeignKey("Cpt4ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt5")
                        .WithMany()
                        .HasForeignKey("Cpt5ID");

                    b.HasOne("MediFusionPM.Models.Cpt", "Cpt")
                        .WithMany()
                        .HasForeignKey("CptID");

                    b.HasOne("MediFusionPM.Models.ExternalInjuryCode", "ExternalInjury1")
                        .WithMany()
                        .HasForeignKey("ExternalInjury1ID");

                    b.HasOne("MediFusionPM.Models.ExternalInjuryCode", "ExternalInjury2")
                        .WithMany()
                        .HasForeignKey("ExternalInjury2ID");

                    b.HasOne("MediFusionPM.Models.ExternalInjuryCode", "ExternalInjury3")
                        .WithMany()
                        .HasForeignKey("ExternalInjury3ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD1")
                        .WithMany()
                        .HasForeignKey("ICD1ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD")
                        .WithMany()
                        .HasForeignKey("ICDID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode1")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode1ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode2")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode2ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode3")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode3ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode4")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode4ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode5")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode5ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode6")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode6ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode7")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode7ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceCode", "OccurrenceCode8")
                        .WithMany()
                        .HasForeignKey("OccurrenceCode8ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceSpanCode", "OccurrenceSpanCode1")
                        .WithMany()
                        .HasForeignKey("OccurrenceSpanCode1ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceSpanCode", "OccurrenceSpanCode2")
                        .WithMany()
                        .HasForeignKey("OccurrenceSpanCode2ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceSpanCode", "OccurrenceSpanCode3")
                        .WithMany()
                        .HasForeignKey("OccurrenceSpanCode3ID");

                    b.HasOne("MediFusionPM.Models.OccurrenceSpanCode", "OccurrenceSpanCode4")
                        .WithMany()
                        .HasForeignKey("OccurrenceSpanCode4ID");

                    b.HasOne("MediFusionPM.Models.PatientStatusCode", "PatientStatusCode")
                        .WithMany()
                        .HasForeignKey("PatientStatusCodeID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode10")
                        .WithMany()
                        .HasForeignKey("ValueCode10ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode11")
                        .WithMany()
                        .HasForeignKey("ValueCode11ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode12")
                        .WithMany()
                        .HasForeignKey("ValueCode12ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode1")
                        .WithMany()
                        .HasForeignKey("ValueCode1ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode2")
                        .WithMany()
                        .HasForeignKey("ValueCode2ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode3")
                        .WithMany()
                        .HasForeignKey("ValueCode3ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode4")
                        .WithMany()
                        .HasForeignKey("ValueCode4ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode5")
                        .WithMany()
                        .HasForeignKey("ValueCode5ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode6")
                        .WithMany()
                        .HasForeignKey("ValueCode6ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode7")
                        .WithMany()
                        .HasForeignKey("ValueCode7ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode8")
                        .WithMany()
                        .HasForeignKey("ValueCode8ID");

                    b.HasOne("MediFusionPM.Models.ValueCode", "ValueCode9")
                        .WithMany()
                        .HasForeignKey("ValueCode9ID");

                    b.HasOne("MediFusionPM.Models.VisitReason", "VisitReason")
                        .WithMany()
                        .HasForeignKey("VisitReasonID");
                });

            modelBuilder.Entity("MediFusionPM.Models.InsuranceBillingoption", b =>
                {
                    b.HasOne("MediFusionPM.Models.InsurancePlan")
                        .WithMany("InsuranceBillingoption")
                        .HasForeignKey("InsurancePlanID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany("InsuranceBillingoption")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.InsurancePlan", b =>
                {
                    b.HasOne("MediFusionPM.Models.Edi270Payer", "Edi270Payer")
                        .WithMany()
                        .HasForeignKey("Edi270PayerID");

                    b.HasOne("MediFusionPM.Models.Edi276Payer", "Edi276Payer")
                        .WithMany()
                        .HasForeignKey("Edi276PayerID");

                    b.HasOne("MediFusionPM.Models.Edi837Payer", "Edi837Payer")
                        .WithMany()
                        .HasForeignKey("Edi837PayerID");

                    b.HasOne("MediFusionPM.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceID");

                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PlanType", "PlanType")
                        .WithMany()
                        .HasForeignKey("PlanTypeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.InsurancePlanAddress", b =>
                {
                    b.HasOne("MediFusionPM.Models.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Location", b =>
                {
                    b.HasOne("MediFusionPM.Models.POS", "POS")
                        .WithMany()
                        .HasForeignKey("POSID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Notes", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument")
                        .WithMany("Note")
                        .HasForeignKey("BatchDocumentNoID");

                    b.HasOne("MediFusionPM.Models.TodoApi.PatientFollowUp")
                        .WithMany("Note")
                        .HasForeignKey("PatientFollowUpID");

                    b.HasOne("MediFusionPM.Models.Patient")
                        .WithMany("Note")
                        .HasForeignKey("PatientID");

                    b.HasOne("MediFusionPM.Models.TodoApi.PlanFollowup")
                        .WithMany("Note")
                        .HasForeignKey("PlanFollowupID");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Visit")
                        .WithMany("Note")
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.OnlinePortalCredentials", b =>
                {
                    b.HasOne("MediFusionPM.Models.OnlinePortals")
                        .WithMany("OnlinePortalCredentials")
                        .HasForeignKey("OnlinePortalsID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Patient", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.HasOne("MediFusionPM.Models.RefProvider", "RefProvider")
                        .WithMany()
                        .HasForeignKey("RefProviderID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAppointment", b =>
                {
                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.PatientPlan", "PrimarypatientPlan")
                        .WithMany()
                        .HasForeignKey("PrimarypatientPlanID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.HasOne("MediFusionPM.Models.VisitReason", "VisitReason")
                        .WithMany()
                        .HasForeignKey("VisitReasonID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAuthorization", b =>
                {
                    b.HasOne("MediFusionPM.Models.Patient")
                        .WithMany("PatientAuthorization")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientAuthorizationUsed", b =>
                {
                    b.HasOne("MediFusionPM.Models.PatientAuthorization", "PatientAuthorization")
                        .WithMany()
                        .HasForeignKey("PatientAuthorizationID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientFollowUpCharge", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("MediFusionPM.Models.TodoApi.PatientFollowUp")
                        .WithMany("PatientFollowUpCharge")
                        .HasForeignKey("PatientFollowUpID");

                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPayment", b =>
                {
                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("MediFusionPM.Models.Visit")
                        .WithMany("PatientPayments")
                        .HasForeignKey("VisitID");

                    b.HasOne("MediFusionPM.Models.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("patientAppointmentID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPaymentCharge", b =>
                {
                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.PatientPayment")
                        .WithMany("PatientPaymentCharges")
                        .HasForeignKey("PatientPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientPlan", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.InsurancePlanAddress", "InsurancePlanAddress")
                        .WithMany()
                        .HasForeignKey("InsurancePlanAddressID");

                    b.HasOne("MediFusionPM.Models.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanID");

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany("PatientPlans")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.PatientReferral", b =>
                {
                    b.HasOne("MediFusionPM.Models.Patient")
                        .WithMany("PatientReferrals")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PaymentCheck", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PaymentLedger", b =>
                {
                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID");

                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.PatientPaymentCharge", "PatientPaymentCharge")
                        .WithMany()
                        .HasForeignKey("PatientPaymentChargeID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "PatientPlan")
                        .WithMany()
                        .HasForeignKey("PatientPlanID");

                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentCharge", "PaymentCharge")
                        .WithMany()
                        .HasForeignKey("PaymentChargeID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Practice", b =>
                {
                    b.HasOne("MediFusionPM.Models.Client")
                        .WithMany("Practice")
                        .HasForeignKey("ClientID");

                    b.HasOne("MediFusionPM.Models.UserPractices", "UserPractices")
                        .WithMany("Practice")
                        .HasForeignKey("UserPracticesUserID", "UserPracticesPracticeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.PracticeResponsibilities", b =>
                {
                    b.HasOne("MediFusionPM.Models.Practice")
                        .WithMany("PracticeResponsibilities")
                        .HasForeignKey("PracticeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Provider", b =>
                {
                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.ProviderSchedule", b =>
                {
                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.ProviderSlot", b =>
                {
                    b.HasOne("MediFusionPM.Models.ProviderSchedule", "ProviderSchedule")
                        .WithMany()
                        .HasForeignKey("ProviderScheduleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.Reason", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom", "AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MediFusionPM.Models.RefProvider", b =>
                {
                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.ResubmitHistory", b =>
                {
                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Submitter", b =>
                {
                    b.HasOne("MediFusionPM.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.Models.PaymentCharge", b =>
                {
                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode1")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID1");

                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode2")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID2");

                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode3")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID3");

                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode4")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID4");

                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode5")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID5");

                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentVisit")
                        .WithMany("PaymentCharge")
                        .HasForeignKey("PaymentVisitID");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode1")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID1");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode2")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID2");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode3")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID3");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode4")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID4");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode5")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID5");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.Models.PaymentVisit", b =>
                {
                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("MediFusionPM.Models.PaymentCheck")
                        .WithMany("PaymentVisit")
                        .HasForeignKey("PaymentCheckID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PatientFollowUp", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PlanFollowup", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("MediFusionPM.Models.AdjustmentCode", "AdjustmentCode")
                        .WithMany()
                        .HasForeignKey("AdjustmentCodeID");

                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentVisit", "PaymentVisit")
                        .WithMany()
                        .HasForeignKey("PaymentVisitID");

                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID");

                    b.HasOne("MediFusionPM.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");

                    b.HasOne("MediFusionPM.Models.VisitStatus", "VisitStatus")
                        .WithMany()
                        .HasForeignKey("VisitStatusID");
                });

            modelBuilder.Entity("MediFusionPM.Models.TodoApi.PlanFollowupCharge", b =>
                {
                    b.HasOne("MediFusionPM.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("MediFusionPM.Models.Charge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeID");

                    b.HasOne("MediFusionPM.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("MediFusionPM.Models.TodoApi.Models.PaymentCharge", "PaymentCharge")
                        .WithMany()
                        .HasForeignKey("PaymentChargeID");

                    b.HasOne("MediFusionPM.Models.TodoApi.PlanFollowup")
                        .WithMany("PlanFollowupCharge")
                        .HasForeignKey("PlanFollowupID");

                    b.HasOne("MediFusionPM.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonID");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode2")
                        .WithMany()
                        .HasForeignKey("RemarkCode2ID");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode3")
                        .WithMany()
                        .HasForeignKey("RemarkCode3ID");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode4")
                        .WithMany()
                        .HasForeignKey("RemarkCode4ID");

                    b.HasOne("MediFusionPM.Models.RemarkCode", "RemarkCode")
                        .WithMany()
                        .HasForeignKey("RemarkCodeID");
                });

            modelBuilder.Entity("MediFusionPM.Models.Visit", b =>
                {
                    b.HasOne("MediFusionPM.Models.Provider", "AttendingProID")
                        .WithMany()
                        .HasForeignKey("AttendingProviderID");

                    b.HasOne("MediFusionPM.Models.BatchDocument", "BatchDocument")
                        .WithMany()
                        .HasForeignKey("BatchDocumentID");

                    b.HasOne("MediFusionPM.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.ICD", "ICD10")
                        .WithMany()
                        .HasForeignKey("ICD10ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD11")
                        .WithMany()
                        .HasForeignKey("ICD11ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD12")
                        .WithMany()
                        .HasForeignKey("ICD12ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD1")
                        .WithMany()
                        .HasForeignKey("ICD1ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.ICD", "ICD2")
                        .WithMany()
                        .HasForeignKey("ICD2ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD3")
                        .WithMany()
                        .HasForeignKey("ICD3ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD4")
                        .WithMany()
                        .HasForeignKey("ICD4ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD5")
                        .WithMany()
                        .HasForeignKey("ICD5ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD6")
                        .WithMany()
                        .HasForeignKey("ICD6ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD7")
                        .WithMany()
                        .HasForeignKey("ICD7ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD8")
                        .WithMany()
                        .HasForeignKey("ICD8ID");

                    b.HasOne("MediFusionPM.Models.ICD", "ICD9")
                        .WithMany()
                        .HasForeignKey("ICD9ID");

                    b.HasOne("MediFusionPM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Provider", "OperatingProID")
                        .WithMany()
                        .HasForeignKey("OperatingProviderID");

                    b.HasOne("MediFusionPM.Models.Provider", "OrderingProv")
                        .WithMany()
                        .HasForeignKey("OrderingProvID");

                    b.HasOne("MediFusionPM.Models.POS", "POS")
                        .WithMany()
                        .HasForeignKey("POSID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("PatientAppointmentID");

                    b.HasOne("MediFusionPM.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.PatientPlan", "PrimaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("PrimaryPatientPlanID");

                    b.HasOne("MediFusionPM.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.Models.RefProvider", "RefProvider")
                        .WithMany()
                        .HasForeignKey("RefProviderID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "SecondaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("SecondaryPatientPlanID");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog2")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID2");

                    b.HasOne("MediFusionPM.Models.SubmissionLog", "SubmissionLog3")
                        .WithMany()
                        .HasForeignKey("SubmissionLogID3");

                    b.HasOne("MediFusionPM.Models.Provider", "SupervisingProv")
                        .WithMany()
                        .HasForeignKey("SupervisingProvID");

                    b.HasOne("MediFusionPM.Models.PatientPlan", "TertiaryPatientPlan")
                        .WithMany()
                        .HasForeignKey("TertiaryPatientPlanID");
                });

            modelBuilder.Entity("MediFusionPM.ViewModel.AuthIdentityCustom", b =>
                {
                    b.HasOne("MediFusionPM.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("MediFusionPM.Models.Designations", "Designations")
                        .WithMany("AuthIdentityCustom")
                        .HasForeignKey("DesignationID");

                    b.HasOne("MediFusionPM.Models.Practice", "Practice")
                        .WithMany("AuthIdentityCustom")
                        .HasForeignKey("PracticeID");

                    b.HasOne("MediFusionPM.Models.Rights", "Rights")
                        .WithMany()
                        .HasForeignKey("RightsId");

                    b.HasOne("MediFusionPM.Models.Team", "Team")
                        .WithMany("AuthIdentityCustom")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MediFusionPM.ViewModel.AuthIdentityCustom")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Audit.DownloadedFileAudit", b =>
                {
                    b.HasOne("WebApplication1.Models.Audit.DownloadedFileAudit", "DownloadedFiles")
                        .WithMany()
                        .HasForeignKey("DownloadedFilesID");
                });
#pragma warning restore 612, 618
        }
    }
}
